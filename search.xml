<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[iOS 微信 信息都是明文的！！！]]></title>
      <url>http://yoursite.com/2016/11/08/iOS-anquan/</url>
      <content type="html"><![CDATA[<h2 id="微信版本"><a href="#微信版本" class="headerlink" title="微信版本"></a>微信版本</h2><p>iOS上面的weixin 6.1.1，其实这个问题很早就有了</p>
<h2 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h2><p>不需要越狱，不需要用户名密码，微信DB的message没有加密</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>我们首先链接手机，打开如下界面，选择到微信，找到DB<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/iOSanquan1.png" alt="iOSanquan"></p>
<p>接着我们打开这个MM.sqlite，可以看到如下界面</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/iOSanquan2.png" alt="iOSanquan2"></p>
<p>chat开头的这些表都是我们的聊天的分类</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/iOSanquan3.png" alt="iOSanquan3"></p>
<p>接着我们随便打开一个chat就能够看到如下信息</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/iOSanquan4.png" alt="iOSanquan4"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>但是不管怎么样，加密总比不加密的好，另外这样的话，等于我拿到任何一个手机都可以直接看到聊天记录，或者在越狱之后，我通过alpine到任何一台手机上，然后拿到里面的这个文件。不知道除了聊天记录以外，红包记录有没有呢。。＝ ＝。。银行卡记录。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我只是没有退路，所以才做到这个程度]]></title>
      <url>http://yoursite.com/2016/11/08/noway/</url>
      <content type="html"><![CDATA[<p>今天在下飞机之后看到了这篇文章，起初是被文章标题所吸引的，看着看着共鸣就实在太多了。</p>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>在这里我先饮用下文章最后的一段话。</p>
<blockquote>
<p>有时候，我们很容易就把优秀和勤奋混淆。有些人是轻而易举，更多的人是很努力，才能看上去轻而易举。很多人之所以不优秀，只是因为他们有太多出路，而不需要太过勤奋。你试试把退路都断了，其实你也能做到这个程度。</p>
</blockquote>
<p>我不说我自己多么优秀，但是到现在也有了五湖四海的朋友。许多很早就认识了我，许多人许多今天刚认识我，但可以肯定的是，对我的认识和看法各有不同。不过无论在大家眼中我是怎么样的一个人，我自己知道的是我绝对不能算一个能够“轻而易举”的人，更不能算一个“努力”的人，最多最多算一个“运气好”的人。</p>
<h2 id="学生时代"><a href="#学生时代" class="headerlink" title="学生时代"></a>学生时代</h2><p>我记得我的初中是在一所区重点所读，但浑浑噩噩3年过去，很多同学都上了自己梦想的高中，我却去了一所体育专长的高中，从我那个时候看来我根本不适合读书，整天都在网吧玩游戏</p>
<p>记得高中的时候，也和很多人一样我也曾经梦想着考上各种高大上的大学，但是随着时间的推迟，我也知道我根本也不是这块料，从最早想考一本到最后的二本直到最后查询成绩的当晚看到自己落榜，只去了一所非常烂的专科的时候，才发现这一切是那么的真实。</p>
<p>我家庭并不富裕，去了专科之后，也和其他同学一样，每天不怎么上课就在玩dota。一玩就是几年玩过去了，当初金融危机找工作的景象现在都历历在目。无论什么工作，每当寝室里面一个人说自己找到工作，自己的心里就会咯噔一下，然后问自己怎么办，幻想着自己能够找到什么工作。</p>
<h2 id="打工和最初的工作"><a href="#打工和最初的工作" class="headerlink" title="打工和最初的工作"></a>打工和最初的工作</h2><p>我依稀记得在大三（专科的最后一年），有空我就出去打工，也算为自己争取一点生活费。办完健康证在超市里面做试吃员，社会就是那么的现实，每天给我半个小时的吃饭时间，必须在楼梯上蹲着吃，然后试吃的量必须达标否则不给钱。但我依然坚持了下来，为什么？因为没有退路，也许，至少那个时候没有人觉得我很优秀吧。。。。</p>
<p>最后找工作的时候，看过我书后序的人都知道，我最早的一份工作是硬件维修，每天至少出外勤去3家公司维修房顶的天线，先不说苦不苦，危险性极大，没有任何保险措施，每个月500元.为什么？因为没有退路。</p>
<p>某次工伤之后我实在没有办法，选择了一家创业公司，老板问我“测试你做不做？”。我问“测试是做什么的？”，老板答“就是玩玩游戏的，不难”。然后我就走上了这条道路。2个月的试用期，最后的考题是“顺利的跑通monkey”。我最终还是没有完成这个指标，因为我实在不知道怎么做这些东西。虽然我最终没有被开除，但拿着是身边同龄开发工程师1/5的工资在工作，我觉得非常自卑和没有脸面，但为什么我愿意做下去？因为我没有退路。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>如果你能够看到这里，相信你能够明白我最初说的那些话，我根本不够聪明，我根本也不够努力，一切只是因为我一直觉得我没有退路，人要生存，这就是本能。而所谓的运气仅仅是我最初进入的是一家纯移动互联网公司。这里引用我之前和云层的一段对话。<br>“云层：我觉得你在你的年龄能够走到现在几乎就是奇迹”<br>”我：我自己很清楚，如果和我的背景和我的出身一样的人，能和我现在一样的话在测试行业可能很难出现第二个，但很大一部分原因是我第一份正式工作就是做Android的。如果我像大部分测试一样先做了web、server等测试，那么也许我现在还是伸手党，我工作10年也走不到现在的程度”<br>“云层：是的，没错”</p>
<p>一切只是因为没有退路，我们要永远不要去认为自己是优秀的，努力的，甚至有天赋的人。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android GPU 过渡绘制小 Demo，真正的测试]]></title>
      <url>http://yoursite.com/2016/11/07/AndroiGPU/</url>
      <content type="html"><![CDATA[<p>最近也是年底了，大家也是各忙各的，有的炫耀年终奖，有的炫耀维多利亚的秘密。反正各种炫耀。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>嗯，你没有进错。这里是性能板块。我们还是回归正题吧。毕竟在大话移动2.0上面我们也要说点性能的东西。最近也是一边在外演讲一边自己学习中。我们这里拿一个应用来看吧。首先打开手机中的该项设置。</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/gpu1.png" alt="gpu1"></p>
<h2 id="尝试测试"><a href="#尝试测试" class="headerlink" title="尝试测试"></a>尝试测试</h2><p>我们打开我们要测试的应用（注意这个是一个demo），进入主页面之后我们看到如下的界面。</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/gpu2.png" alt="gpu2"></p>
<p>也许有同学就要说了，啊呀不对啊。这个颜色这样了。有bug！！！但是问题就在这里。到了这里我们根本不能算测试完毕，这个至少在正确的认知中，这样最多是测试不完整，因为你并不知道问题出在哪里。所以接着我们还是要继续做的，首先我们要来判断是不是有问题。</p>
<h2 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h2><p>GPU绘制过渡，</p>
<p>颜色标识: 从好到差:蓝-绿-淡红-红</p>
<p>蓝色1x过度绘制<br>绿色2x过度绘制<br>淡红色3x过度绘制<br>红色超过4x过度绘制<br>那么大家大概能够心里有数了。接着我们要来真正的测试了。</p>
<h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>那么首先我们先来看下UI的结构。如下图，我们得知是CustomViewAbove这个View。<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/gpu3.png" alt="gpu3"><br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/gpu4.png" alt="gpu4"></p>
<p>我们必须追查到代码里，主要我们会关注两个。</p>
<ol>
<li>构造函数</li>
<li>重写的各种draw的方法</li>
</ol>
<p>我们在代码中看到如下构造方法和draw的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomViewAbove</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomViewAbove</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs);</div><div class="line">    initCustomViewAbove();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initCustomViewAbove</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// setDescendantFocusability(FOCUS_AFTER_DESCENDANTS);</span></div><div class="line">    <span class="keyword">this</span>.setBackgroundColor(getResources().getColor(</div><div class="line">        R.color.backColor));</div><div class="line">    setDescendantFocusability(FOCUS_BEFORE_DESCENDANTS);</div><div class="line">    setClickable(<span class="keyword">true</span>);</div><div class="line">    setFocusable(<span class="keyword">true</span>);</div><div class="line">    setWillNotDraw(<span class="keyword">false</span>);</div><div class="line">    <span class="keyword">final</span> Context context = getContext();</div><div class="line">    mScroller = <span class="keyword">new</span> Scroller(context, sInterpolator);</div><div class="line">    <span class="keyword">final</span> ViewConfiguration configuration = ViewConfiguration.get(context);</div><div class="line">    mTouchSlop = ViewConfigurationCompat</div><div class="line">            .getScaledPagingTouchSlop(configuration);</div><div class="line">    mMinimumVelocity = configuration.getScaledMinimumFlingVelocity();</div><div class="line">    mMaximumVelocity = configuration.getScaledMaximumFlingVelocity();</div><div class="line">    setInternalPageChangeListener(<span class="keyword">new</span> SimpleOnPageChangeListener() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mViewBehind != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">switch</span> (position) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                    mViewBehind.setChildrenEnabled(<span class="keyword">true</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                    mViewBehind.setChildrenEnabled(<span class="keyword">false</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> density = context.getResources().getDisplayMetrics().density;</div><div class="line">    mFlingDistance = (<span class="keyword">int</span>) (MIN_DISTANCE_FOR_FLING * density);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先我们从主界面上面可以看到是一个类似于fragment的控件的效果，Android的Views大家都知道是一个树状结构，那么其实有很多肉眼看不到的view是不用去绘制的。否则虽然看不到，但是依然会是影响性能的。我们经过尝试之后，去掉了其中的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setBackgroundColor(getResources().getColor(</div><div class="line">            R.color.backColor));</div></pre></td></tr></table></figure>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/gpu5.png" alt="gpu5"></p>
<p>在这里的setBackground其实本身是绘制背景的，但是由于View的重叠，用户并看不到这层绘制，但是的确重复绘制了。所以从效果上面我们可以看到从红色变成了淡红。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大家不要上来就问测试怎么测试，安全怎么测试。性能和安全和你们执行测试用例，和UI的功能自动化是两回事儿。很多需要人为的介入分析和尝试。并不是说用一个工具去检测下有没有问题，有就有，没有就没有那么简单。希望大家明白这点。</p>
<p>by monkey</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2014年 年终总结]]></title>
      <url>http://yoursite.com/2016/11/07/2014summary/</url>
      <content type="html"><![CDATA[<p>其实我一直不知道这一年做了什么。我其实一直只记得这一年我在重复做几件事情。</p>
<ol>
<li>不停的告诉大家不要伸手，但是同时又停止不了回答很多小白问题</li>
<li>这一年我在公司可谓是坐过山车，一年中发生了5年可能发生的事情。不过结果还是好的</li>
<li>不停的在外面飞机＋火车，从而获得了type in 的称号。</li>
</ol>
<p>其实我首先先想说累，很多人和我说自己没有时间，你们真的体验过吗？我想说只有你们体验过了你们才会进步，因为那是一种斗争。这一年中我每天要在公司夹缝中求生存，我每天回家要学习，我根本没有双休日。有的时候一周里面我加班到凌晨，周五还没有结束就上飞机飞到外面，凌晨住进酒店，然后周一的凌晨再飞回来，然后继续上班。有的时候累已经不是困，已经不是身体上的，更是精神上的，只有自己知道要什么，才能够坚持，才能够去努力改变这一切，改变自己的生活。累要累的值得，而不是希望这一生都那么劳累。</p>
<p>其实很多人不了解我，但我明白大家的很多的感受。我不提倡伸手，我不想去和大家强调自己去主动学习的问题，原因是我是一个loser，我不敢说我多么成功，但是从2010年500元一个月的月薪，一个非常烂的专科毕业，连毕业证书都没有拿到的人这个点上面来讲，我觉得我能够混到现在已经算是奇迹了。依稀记得我在学校中我想过我以后会做什么，但是从未想到是现在这样。这四年的时间，我的确进步了，但是我没有忘记当初的心态和经历，我不希望只有我改变了，大家改变行业才能够改变。</p>
<p>其实时不时的也有很多关心我的人，和我说要陪陪我女儿。我也知道现在正是孩子最需要陪，就如恒温说的，我也同样很感谢我丈母娘和我妈能够帮我去带领宝宝，也感谢我老婆能够去关心宝宝。而我实在没有办法，在社会，需要生存。我现在的付出是为了将来更好的生活，也是没有办法的办法。</p>
<p>最后按照惯例，我回顾下我在2014年的一些事迹时间，说自己没有时间的看过来。那啥。。我澄清下。。我是88年的。。不要都觉得我很大了。。。。好不好。。。</p>
<p>2014年2月23号举办了移动测试会沙龙，并且是第一次使用了公司场地<br>2014年4月12号在上海出席了拔丝活动，并担任讲师<br>2014年4月19号在北京举办了移动测试会沙龙<br>2014年5月18号出席了上海某测试沙龙讲师<br>2014年5月24号出席了南京测试圈测试沙龙活动，并担任讲师<br>2014年6月14号在北京工信部研究所帮他们做移动互联网测试企业内训<br>2014年6月20号出席北京亚太地区分会，并担任讲师<br>2014年7月1号大话移动app测试正式出版<br>2014年7月12号参加google开发者大会，并宣传我的新书<br>2014年7月13号去上海同济校区给学生做技术演讲<br>2014年7月26号出席上海亚太地区分会，并担任讲师<br>2014年8月1号连续3周前往苏州给园区公司做技术内训<br>2014年9月13号参加CSTQB大会，并担任讲师<br>2014年9月20号前往深圳，参加深圳的分会，并担任讲师<br>2014年11月2号举办移动测试会，在ucloud举办。<br>2014年11月时不时前往杭州，当天来回<br>2014年11月14号飞珠海进行企业内训<br>2014年11月23号前往帝都参加top100<br>2014年12月5号前往南京出席沙龙，并担任一天的讲师<br>2014年12月6号前往武汉，在华中科技大学举办创业和职业规划讲座</p>
<p>精彩一直会继续，每个人都有每个人的精彩，也希望大家能活的精彩。祝愿大家2015年一切都好</p>
<p>by monkey</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle 编译交互小技巧]]></title>
      <url>http://yoursite.com/2016/11/07/gradlenew/</url>
      <content type="html"><![CDATA[<p>今天偶然在网上看到这样的小技巧，不过其实按照中Groovy的介绍，这个也是理所当然的，不过这个例子能够打开脑洞，其实啥都可以做。</p>
<p>首先工程已经在个人开源中：<a href="https://github.com/monkeytest15/Gradle_multi_apks/tree/master/monkeyApplication" target="_blank" rel="external">https://github.com/monkeytest15/Gradle_multi_apks/tree/master/monkeyApplication</a></p>
<p>如果看到之前的Gradle文章的话其实可以了解到groovy是个什么语言，其次之前其实也都看到gradle的编译是运行之后可以直接产出应用的，这次我们来看下交互的模式。</p>
<p>这个例子是为了在使用gradle编译的时候能够进行签名的定制化，我们需要在app的目录下，注意不是root project。在app的目录下的build.gradle做如下编写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">21</span></div><div class="line">    buildToolsVersion <span class="string">"20.0.0"</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.example.monkey.myapplication"</span></div><div class="line">        minSdkVersion <span class="number">10</span></div><div class="line">        targetSdkVersion <span class="number">21</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//这个是解决lint报错的代码</span></div><div class="line">    lintOptions &#123;</div><div class="line">        abortOnError <span class="keyword">false</span></div><div class="line">    &#125;</div><div class="line">    signingConfigs &#123;</div><div class="line">        myConfigs &#123;</div><div class="line">            <span class="function">storeFile     <span class="title">file</span><span class="params">( System.console()</span>.<span class="title">readLine</span><span class="params">(<span class="string">"\n\$ Enter keystore path: "</span>)</span>)</span></div><div class="line">            storePassword       System.<span class="title">console</span><span class="params">()</span>.<span class="title">readPassword</span><span class="params">(<span class="string">"\n\$ Enter keystore password: "</span>)</span></div><div class="line">            keyAlias            System.<span class="title">console</span><span class="params">()</span>.<span class="title">readLine</span><span class="params">(<span class="string">"\n\$ Enter key alias: "</span>)</span></div><div class="line">            keyPassword         System.<span class="title">console</span><span class="params">()</span>.<span class="title">readPassword</span><span class="params">(<span class="string">"\n\$ Enter key password: "</span>)</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    productFlavors &#123;</div><div class="line">        qqqq &#123;</div><div class="line">            applicationId = <span class="string">'com.monkey.qqq'</span></div><div class="line">        &#125;</div><div class="line">        hhhhh &#123;</div><div class="line">            applicationId=<span class="string">'com.monkey.hhh'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div><div class="line">    compile 'com.android.support:appcompat-v7:21.0.3'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这中间，关键代码如下：</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/gradle1.png" alt="gradle1"></p>
<p>我们可以在编译的时候看到出现了签名的选择：<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/gradle2.png" alt="gradle2"></p>
<p>到此我们脑洞可以大开啦～～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gradle 集成修改 Android Manifest.xml 打多个包实践]]></title>
      <url>http://yoursite.com/2016/11/07/gradle-Androidmanifest/</url>
      <content type="html"><![CDATA[<p>其实这次我想好好把gradle 构建android工程生成的文件好好看看的，但是实在太多了，而且网络上资料有限，故而就放在下次吧。</p>
<p>这次做了一些新的尝试，然后也看了下一些之前没有关心的文件是啥用。</p>
<h2 id="gradle-wrapper-jar"><a href="#gradle-wrapper-jar" class="headerlink" title="gradle-wrapper.jar"></a>gradle-wrapper.jar</h2><p>首先其实之前就看到有这个jar包，但是还没有去关心过到底是啥用。<br>Gradle Wrapper 是一种更加方便的使用gradle的方法，他包括了为支持windows的批处理脚本和支持类unix的shell脚本。这些脚本是你，在不安装gradle时候，也可以用gradle。安装wrapper只需要在你的build.gradle文件中添加如果下代码。<br>我们来看下结构</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">└── initial</div><div class="line">    └── gradlew</div><div class="line">    └──gradlew.bat</div><div class="line">    └── gradle</div><div class="line">       └── wrapper</div><div class="line">           └── gradle-wrapper.jar</div><div class="line">           └── gradle-wrapper.properties</div></pre></td></tr></table></figure>
<p>现在已经可以用Wrapper构建你的工程了。你将和之前一样，运行gradle build命令构建工程。<br>./gradlew build<br>第一行执行Gradle的版，他讲下载和缓存执行版本gradle的二进制文件。 Gradle Wrapper 文件将和代码一样提交给版本控制器，这样任何人，获取代码后，不用安装gradle，就可以构建工程。</p>
<p>这个的确会非常方便，总体感觉以后再也不用编写什么打包脚本了。直接checkout，运行指定gradle命令即可。</p>
<h2 id="多个项目"><a href="#多个项目" class="headerlink" title="多个项目"></a>多个项目</h2><p>在gradle项目根目录下面我们也可以看到有一个settings.gradle的文件，默认是有<br>include ‘:app’<br>假设我们有三个项目，分别是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  MyProject/</div><div class="line"></div><div class="line">| settings.gradle</div><div class="line"></div><div class="line">app/</div><div class="line">| build.gradle</div><div class="line"></div><div class="line">app2/</div><div class="line">| build.gradle</div><div class="line"></div><div class="line">app3/</div><div class="line">| build.gradle</div></pre></td></tr></table></figure>
<p>那么我们需要修改settings.gradle，变成include ‘:app’, ‘:app2′, ‘:app3′</p>
<h2 id="1-0-rc的坑（转）"><a href="#1-0-rc的坑（转）" class="headerlink" title="1.0 rc的坑（转）"></a>1.0 rc的坑（转）</h2><ul>
<li><p>Error:(26, 0) Gradle DSL method not found: ‘runProguard()’问题，这里是runProguard()方法被替换了，把runProguard改为minifyEnabled即可，<a href="http://stackoverflow.com/questions/27016385/error26-0-gradle-dsl-method-not-found-runproguard" target="_blank" rel="external">http://stackoverflow.com/questions/27016385/error26-0-gradle-dsl-method-not-found-runproguard</a></p>
</li>
<li><p>“Could not find property ‘packageApplication’ on com.android.build.gradle.internal.api.ApplicationVariantImpl_Decorated”问题，这个属性被取消了，这里是替换要输出的APK的名称，<a href="http://stackoverflow.com/questions/27209188/could-not-find-property-packageapplication-on-com-android-build-gradle-interna" target="_blank" rel="external">http://stackoverflow.com/questions/27209188/could-not-find-property-packageapplication-on-com-android-build-gradle-interna</a></p>
</li>
<li><p>“Could not find property ‘processManifest’ on com.android.build.gradle.internal.api.ApplicationVariantImpl”问题，这里是由于manifest merger改动了，解决方法如下：<a href="http://stackoverflow.com/questions/27302965/could-not-find-property-processmanifest-on-com-android-build-gradle-internal-a" target="_blank" rel="external">http://stackoverflow.com/questions/27302965/could-not-find-property-processmanifest-on-com-android-build-gradle-internal-a</a></p>
</li>
<li><p>android studio中的plugin也发生了改变，将”apply plugin: ‘android’”改为”apply plugin: ‘com.android.application’”</p>
</li>
</ul>
<p>monkey：不过1.0坑真的很多，大家自己去尝试就知道了。主要是stackoverflow上面的东西太旧。</p>
<h2 id="修改app和root-project中两个build-gradle"><a href="#修改app和root-project中两个build-gradle" class="headerlink" title="修改app和root project中两个build.gradle"></a>修改app和root project中两个build.gradle</h2><p>我们创建好Android application之后，可以在app目录和根目录下都看到build.gradle文件，这两个文件分别会从app层面和多个project层面进行build的管控。<br>我们先来看下根目录的gradle.build文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//其实这里已经有了标识，告诉大家这个是可以管控多个模块的</span></div><div class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></div><div class="line"></div><div class="line"><span class="comment">//编译脚本</span></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line"><span class="comment">//这里可以是maven，jcenter等</span></div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.0.0'</span></div><div class="line"></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">// 1.0 rc之后这个需要修改</span></div><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">21</span></div><div class="line">    buildToolsVersion <span class="string">"20.0.0"</span></div><div class="line"></div><div class="line"><span class="comment">//这里需要设置资源文件，否则会报错，文件找不到</span></div><div class="line">    sourceSets &#123;</div><div class="line">        main &#123;</div><div class="line">            manifest.srcFile <span class="string">'AndroidManifest.xml'</span></div><div class="line">            java.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            resources.srcDirs = [<span class="string">'src/main/res'</span>]</div><div class="line">            aidl.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            renderscript.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            res.srcDirs = [<span class="string">'res/main/res'</span>]</div><div class="line">            assets.srcDirs = [<span class="string">'assets'</span>]</div><div class="line">        &#125;</div><div class="line">        instrumentTest.setRoot(<span class="string">'tests'</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.example.monkey.myapplication"</span></div><div class="line">        minSdkVersion <span class="number">10</span></div><div class="line">        targetSdkVersion <span class="number">21</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line"><span class="comment">//增加混淆</span></div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//这个是解决lint报错的代码</span></div><div class="line">    lintOptions &#123;</div><div class="line">        abortOnError <span class="keyword">false</span></div><div class="line">    &#125;</div><div class="line">  <span class="comment">// 增加签名</span></div><div class="line">    signingConfigs &#123;</div><div class="line">        myConfigs &#123;</div><div class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"/Users/monkey/.android/debug.keystore"</span>)</span></span></div><div class="line">            keyAlias "..."</div><div class="line">            keyPassword "..."</div><div class="line">            storePassword "..."</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//替换AndroidManifest.xml的REPLACE_KEY字符串为渠道名称</span></div><div class="line">android.applicationVariants.all &#123; variant -&gt;</div><div class="line">    variant.outputs.each &#123; output -&gt;</div><div class="line">        output.processManifest.doLast &#123;</div><div class="line">            <span class="comment">//v1.11之前这里用的copy&#123;&#125;，我换成了文件操作，这样可以在v1.11版本正常运行，并保持文件夹整洁</span></div><div class="line">            <span class="comment">//$&#123;buildDir&#125;是指build文件夹</span></div><div class="line">            <span class="comment">//$&#123;variant.dirName&#125;是flavor/buildtype，例如GooglePlay/release，运行时会自动生成</span></div><div class="line">            <span class="comment">//下面的路径是类似这样：build/intermediates/manifests/GooglePlay/release/AndroidManifest.xml</span></div><div class="line">            def manifestFile = <span class="string">"$&#123;buildDir&#125;/intermediates/manifests/full/$&#123;variant.dirName&#125;/AndroidManifest.xml"</span></div><div class="line"></div><div class="line">            <span class="comment">//将字符串REPLACE_KEY替换成flavor的名字</span></div><div class="line">            def updatedContent = <span class="keyword">new</span> File(manifestFile).getText(<span class="string">'UTF-8'</span>).replaceAll(<span class="string">"REPLACE_KEY"</span>, <span class="string">"$&#123;variant.productFlavors[0].name&#125;"</span>)</div><div class="line">            <span class="keyword">new</span> File(manifestFile).write(updatedContent, <span class="string">'UTF-8'</span>)</div><div class="line"></div><div class="line">            <span class="comment">//将此次flavor的AndroidManifest.xml文件指定为我们修改过的这个文件</span></div><div class="line">            variant.processResources.manifestFile = file(<span class="string">"$&#123;buildDir&#125;/intermediates/manifests/full/$&#123;variant.dirName&#125;/AndroidManifest.xml"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着看下app下面的build.gradle<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//增加application的apply</span></div><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line"><span class="comment">//配置sdk版本</span></div><div class="line">    compileSdkVersion <span class="number">21</span></div><div class="line">    buildToolsVersion <span class="string">"20.0.0"</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.example.monkey.myapplication"</span></div><div class="line">        minSdkVersion <span class="number">10</span></div><div class="line">        targetSdkVersion <span class="number">21</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//这个是解决lint报错的代码</span></div><div class="line">    lintOptions &#123;</div><div class="line">        abortOnError <span class="keyword">false</span></div><div class="line">    &#125;</div><div class="line">    signingConfigs &#123;</div><div class="line">        myConfigs &#123;</div><div class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"/Users/monkey/.android/debug.keystore"</span>)</span></span></div><div class="line">            keyAlias "..."</div><div class="line">            keyPassword "..."</div><div class="line">            storePassword "..."</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//增加多个打包渠道配置</span></div><div class="line">    productFlavors &#123;</div><div class="line">        qqqq &#123;</div><div class="line">            applicationId = <span class="string">'com.monkey.qqq'</span></div><div class="line">        &#125;</div><div class="line">        hhhhh &#123;</div><div class="line">            applicationId=<span class="string">'com.monkey.hhh'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span></div><div class="line">    compile 'com.android.support:appcompat-v7:21.0.3'</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们使用gradlew进行编译之后，我们可以在如下目录下中找到分别为了打不同包所用的Android Manifest.xml文件。</p>
<p>同时我们也可以在outputs中的apk看到我们编译出的多个apk，但这里只是package name不同，渠道的meta data并没有修改，但是方法是一样的。</p>
<p>最后的给个编译report。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">ec2-<span class="number">54</span>-<span class="number">67</span>-<span class="number">1</span>-<span class="number">101</span>:monkeyApplication monkey$ ./gradlew app:assembleDebug</div><div class="line">:app:preBuild</div><div class="line">:app:compileHhhhhDebugNdk UP-TO-DATE</div><div class="line">:app:preHhhhhDebugBuild</div><div class="line">:app:checkHhhhhDebugManifest</div><div class="line">:app:preHhhhhReleaseBuild</div><div class="line">:app:preQqqqDebugBuild</div><div class="line">:app:preQqqqReleaseBuild</div><div class="line">:app:prepareComAndroidSupportAppcompatV72103Library UP-TO-DATE</div><div class="line">:app:prepareComAndroidSupportSupportV42103Library UP-TO-DATE</div><div class="line">:app:prepareHhhhhDebugDependencies</div><div class="line">:app:compileHhhhhDebugAidl UP-TO-DATE</div><div class="line">:app:compileHhhhhDebugRenderscript UP-TO-DATE</div><div class="line">:app:generateHhhhhDebugBuildConfig UP-TO-DATE</div><div class="line">:app:generateHhhhhDebugAssets UP-TO-DATE</div><div class="line">:app:mergeHhhhhDebugAssets UP-TO-DATE</div><div class="line">:app:generateHhhhhDebugResValues UP-TO-DATE</div><div class="line">:app:generateHhhhhDebugResources UP-TO-DATE</div><div class="line">:app:mergeHhhhhDebugResources UP-TO-DATE</div><div class="line">:app:processHhhhhDebugManifest UP-TO-DATE</div><div class="line">:app:processHhhhhDebugResources UP-TO-DATE</div><div class="line">:app:generateHhhhhDebugSources UP-TO-DATE</div><div class="line">:app:compileHhhhhDebugJava UP-TO-DATE</div><div class="line">:app:preDexHhhhhDebug UP-TO-DATE</div><div class="line">:app:dexHhhhhDebug UP-TO-DATE</div><div class="line">:app:processHhhhhDebugJavaRes UP-TO-DATE</div><div class="line">:app:validateDebugSigning</div><div class="line">:app:packageHhhhhDebug UP-TO-DATE</div><div class="line">:app:zipalignHhhhhDebug UP-TO-DATE</div><div class="line">:app:assembleHhhhhDebug UP-TO-DATE</div><div class="line">:app:compileQqqqDebugNdk UP-TO-DATE</div><div class="line">:app:checkQqqqDebugManifest</div><div class="line">:app:prepareQqqqDebugDependencies</div><div class="line">:app:compileQqqqDebugAidl UP-TO-DATE</div><div class="line">:app:compileQqqqDebugRenderscript UP-TO-DATE</div><div class="line">:app:generateQqqqDebugBuildConfig UP-TO-DATE</div><div class="line">:app:generateQqqqDebugAssets UP-TO-DATE</div><div class="line">:app:mergeQqqqDebugAssets UP-TO-DATE</div><div class="line">:app:generateQqqqDebugResValues UP-TO-DATE</div><div class="line">:app:generateQqqqDebugResources UP-TO-DATE</div><div class="line">:app:mergeQqqqDebugResources UP-TO-DATE</div><div class="line">:app:processQqqqDebugManifest UP-TO-DATE</div><div class="line">:app:processQqqqDebugResources UP-TO-DATE</div><div class="line">:app:generateQqqqDebugSources UP-TO-DATE</div><div class="line">:app:compileQqqqDebugJava UP-TO-DATE</div><div class="line">:app:preDexQqqqDebug UP-TO-DATE</div><div class="line">:app:dexQqqqDebug UP-TO-DATE</div><div class="line">:app:processQqqqDebugJavaRes UP-TO-DATE</div><div class="line">:app:packageQqqqDebug UP-TO-DATE</div><div class="line">:app:zipalignQqqqDebug UP-TO-DATE</div><div class="line">:app:assembleQqqqDebug UP-TO-DATE</div><div class="line">:app:assembleDebug UP-TO-DATE</div><div class="line"></div><div class="line">BUILD SUCCESSFUL</div><div class="line"></div><div class="line">Total time: <span class="number">8.73</span> secs</div></pre></td></tr></table></figure>
<p>总体来讲，gradle的编译会比以往的mvn的pom配置文件来的更灵活，可配置性更强。关于更多的配置见之后的文章吧</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何做好移动互联网应用测试]]></title>
      <url>http://yoursite.com/2016/11/06/howtostudytest/</url>
      <content type="html"><![CDATA[<p>首先很高兴的是移动测试会第八期在ucloud的赞助下非常非常圆满的成功了。人真的越来越多，妹子也越来越漂亮了。同时感谢小A和永达以及小马试驾创业公司的支持。移动测试会虽然最早是我个人创立的，但是一个人的能力毕竟有限，所以这第八期说明了团结就是力量：），也希望之后大家更多的来支持我们，本次活动的链接：<a href="http://www.douban.com/event/22861768/" target="_blank" rel="external">http://www.douban.com/event/22861768/</a></p>
<p>11月8号支付宝上海要开始一天的专场招聘，所以最近我面试也非常的频繁。今天的活动我也碰见了一些朋友来咨询我，所以在这里我想小小的谈论下如何进行移动无线应用的测试学习。</p>
<p>为什么我定位移动无线互联网的测试，还是应用的测试呢，因为我个人就是做应用测试的，所以我系统测试也做过，不过不深入，所以我就不想去讨论自己不熟悉的领域了。其实在很久前我画过一张技能树的图，也许比较粗糙，但是也还是有价值的。blog链接见：<a href="http://blog.sina.com.cn/s/blog_7022adbf0101b31w.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_7022adbf0101b31w.html</a></p>
<p>在之前的文章中也已经提到过了行业中的几类人，那么我们应该怎么如何客观的学习呢？请不要觉得自己已经工作很多时间就不愿意往下看了，反正看了你也不少块肉。请跟着以下的文字慢慢阅读，问问自己达到几点，不要自欺欺人就好。</p>
<p>现在不会做测试的拼命到处问怎么做测试，现在在手动测试的拼命问怎么做自动化，现在做自动化的拼命问怎么写测试框架，现在写测试框架的拼命让团队使用，现在写框架并且让团队使用的拼命问除了维护框架还有什么别的可以做，现在没有事情做的拼命在问到底测试做什么呢？</p>
<p>不知道每天会有多少人，每秒钟会有多少人会去问怎么做自动化，多少人会去问自己发展方向是什么，学习方向又是什么。我很明确的说，你没有方向原因在于你的无知，人最大的敌人就是恐惧和无知，两者相辅相成，最终就是一事无成。你问那么多有什么用，踏踏实实的先开始学有什么不好。<br>比如你要学习移动互联网的无线应用测试了，比如你要开始学习Android的应用测试了。那么首先第一步你先看google 提供的文档吧，sdk文档不说详细，先浏览一遍吧。然后既然你是一个做测试的，我们就说正常的道路，你至少先将文档中与test这个关键字相关的工具也好，框架也好看一下吧。不懂的可以随时google或者百度来帮助我们阅读完sdk的docs。什么？你从来不看官方文档？android是谁生的？你连亲爹妈都不看，那么你看啥？看后妈？然后抱怨怎么看不懂？你怪谁？</p>
<p>ok，假设你老老实实的看完了，然后你说你了解你们产品的业务了，你就可以做应用的功能测试了吗？非也，试问大部分测试真的觉得自己够资格去做功能测试吗？觉得功能测试很简单吗？问起来很多人都很自信满满的说自己非常了解业务。ok，试问，你的app中每个功能对应哪些接口你知道吗？这些接口会有什么核心参数知道吗？试问，你的产品的核心代码你有阅读过吗？你的产品前端app对应的后台服务的代码你有阅读过吗？你说你测试的产品有视频是吧，视频格式有哪些？常见分辨率有哪几种？常见码流有哪些？如果这些你都不知道并不代表你不回做功能测试或者业务测试，而是你根本无法深层次的去设计测试用例，那么请问你这算会功能测试了吗？还有的同学和我说用户体验测试，ok，继续问，请问你看过google提供的android的UI Design Guide吗？也许你没有看过，也许你根本不知道，不管是哪条，那么还谈什么用户体验呢？简单来讲，我们做一个测试很简单，要深入做很困难，就如同今天移动测试会上茉莉说的wifi测试，也许让也许人去测试wifi测试也会测试，但是深入呢？我们做测试要踏踏实实，不要浮躁，浮躁只会让你继续sb，但是不会阻止别人nb。</p>
<p>ok，假设功能测试的点你都清楚了，然后你说你技术多多少少知道点，然后你就可以去做应用的自动化测试了吗？非也。我们一个一个来看。大部分先来做的是UI Automation，ok，appium我在这边就不说了，也许2w字都吐槽吐不完，我就说robotium。那么你第一步是先看下robotium官方网站的sample和wiki，不要到处问例子或者直接上来就导入jar包去做。了解完毕之后，那么可以继续深入的去了解junit 和instrumentation，了解这两者能够让你对robotium更了解并且在写用例的时候更得心应手。然后你会写了sample，能够跑通就算ok了么？非也，那么接着碰见的问题就是如何管理suite，如何管理数据，比如testng，如何做参数配置，比如config.xml，如何进行用例的架构的维护，使用op等。接着如何将其集成到持续集成中？如果你仔细看过instrumentationtestrunner的官方文档你就不会问了。接着除了native的，也许会碰见自定义控件的自动化，最后还有webview和h5的自动化等。那么这些前提是你要先去了解这个自定义控件以及webview到底是什么吧，而不是直接拿robotium自定义的api直接食用，然后抱怨说，啊呀这个怎么跑不通。最后记得一定要结合业务去做设计和断言。<br>接着很多人还会觉得很牛逼的去找到BDD的框架，gem安装，套用cucumber和robotium。但是又会发现各种问题，在做这个事情之前继续试问，ruby gem管理你去学习了么？cucumber是啥知道了么？BDD框架源码结构有看过吗？step怎么封装知道吗？官方的github的wiki和issue有过一遍吗？都没有？那么你还问啥，先去看再做讨论。</p>
<p>为什么我那么强调学习能力和态度，因为移动互联网的测试已经不是一个工具或者平台能够制霸的时代了。移动互联网现在更多的是注重实用开源框架，注重灵活的使用工具和代码来提升自己的效率，而不是拿来一个工具学会怎么用，然后就给你一个结果告诉你缺陷在什么地方。故而不是再去想什么“怎么做性能自动化测试”这种问题。无论你用360这种app也好，或者别的工具也罢，首先你拿到的数据并非是你公司团队想要的，其次请问这个数据你知道是怎么获取的吗？这个工具告诉你，cpu，内存，电量，流量，GPU绘制消耗，或者crash信息你就信啊？那么请问要你有啥用？你说你连数据怎么来的如果都不知道这个信息你敢用来作为测试报告吗？我们至少得自己去学习一下怎么获取这些数据吧，然后你编写service也好，使用shell也罢将这些做成自动化工具，那么也是有理有据。否则请问你真的会做自动化测试吗？最后记得一定要结合业务，那么势必要详细的了解业务，请看上面。可详见：<a href="https://github.com/monkeytest15/AndroidPerformanceTest_Python" target="_blank" rel="external">https://github.com/monkeytest15/AndroidPerformanceTest_Python</a></p>
<p>接着来说安全测试也是一样。不要去想“有什么工具能够做安全测试啊？”。好了，这个问题我就不展开讨论了额，否则很多人肯定会觉得我在鄙视他们的智商。安全的测试和大部分人知道的测试根本就是两个领域，不要妄想你连上面几点都不知道的情况下就去做安全测试，真的不是我看不起你们。</p>
<p>其实我们需要想象我们掌握的知识点是一个一个积木，而现在你先去看哪些积木你还没有，你先去获得。就比如java都不怎么会，然后就说自己要去做自动化，android都不了解就说要做自动化。没有太大必要。积木一个一个去搭，然后方向自然而然的就有了。目前学习移动无线的应用测试没有什么一定的路，每个人所在公司不同，所处业务不同，不要去问别人，最重要的是自己静下心来，记住，是静下心来问自己，自己真的不懂，如果自己是什么都不懂，那么就踏踏实实的从语言的学习，android本身的文档，工具等一个一个去学，不要浮躁。只要踏实了，不会没有方向，方向永远在你的心中。</p>
<p>最后想强调一点的是，请眼光放长远，站在更高的高度看问题，不要做了10年还在做UI自动化，而且还根本做的不深入。记住，UI只不过是自动化中的冰山一角，你要去看的还有很多。不要局限自己，不要让公司局限你，除非你一辈子就打算在这个公司养老了。如果你不赞同我，那么随意，本来我就不指望所有人都点赞。</p>
<p>by monkey</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS 逆天框架 FLEX]]></title>
      <url>http://yoursite.com/2016/11/04/ios-flex/</url>
      <content type="html"><![CDATA[<p>今天无意之间看到了一个框架还是很逆天的，从首页的gif看就非常的逆天。<br>github的网站：<a href="https://github.com/Flipboard/FLEX" target="_blank" rel="external">https://github.com/Flipboard/FLEX</a></p>
<p>FLEX是一个需要注入式的一种框架，从描述来看，功能非常多。主要来讲的话能够对正在运行的应用进行样式的修改和控件的读取。</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/9549d16c6a342eeff046b314b24ed06a.gif" alt="gif"></p>
<p>FLEX会赐予你SuperPower！！！</p>
<ol>
<li>可以查看控件的坐标和属性</li>
<li>看任何一个对象的属性和成员变量</li>
<li>动态修改属性和成员变量</li>
<li>动态的调用实例和类方法<br>etc…</li>
</ol>
<p>FLEX正因为是注入式的，所以不需要在链接LLDB或者Xocde，或者是远程的调试服务器，它可以在本地随时随地的进行自有的操作和调试</p>
<p>具体的一些主要功能点我们通过以下几个图来看下：</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/120c625da15bc3f6416ffbcce24782da.gif" alt="gif2"></p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/gif3.gif" alt="gif3"></p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/git4.gif" alt="gif4"></p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/gif5.gif" alt="gif5"></p>
<p>FLEX的设置也非常简单。在Build Settings中点击“＋”，选择Add User-Defined Settings</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/2d9bbd9b94c89365465d6459d8f615ec.png" alt="flex1"></p>
<p>根据你打包的debug或者release属性进行相应的FLEX＊设置即可。</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/0722ea8935a0d4542610d32979c4e0b1.png" alt="flex2"></p>
<p>在你的项目中，你想使用FLEX的代码的地方加入#if DEBUG</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/e41310de1e83e9a93e4522a4b3754dce.png" alt="flex3"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[九年来，移动互联测试有什么重要进展]]></title>
      <url>http://yoursite.com/2016/11/03/nineyears/</url>
      <content type="html"><![CDATA[<p>看完<a href="http://daily.zhihu.com/story/8662398" target="_blank" rel="external">十年来，编程领域有什么重要进展</a>之后，好多人说还是想看看测试有什么进展。好吧，我就来“临摹”下。虽然我作为88年的老腊肉也没有工作九年，但估计也没有人比我合适来写了。不过总觉得让我这样一个要转行的人来写也不是那么合适了。</p>
<h2 id="从业人员数量"><a href="#从业人员数量" class="headerlink" title="从业人员数量"></a>从业人员数量</h2><p>好吧，人家都从代码，标准上来讲，测试我能想到的第一个就是人员数量了。在2008年的时候行业内测试人员占比是很少的，更不要说移动互联网了。记得那个时候微软的很多员工说我很看好Android，旁人只当笑话。我在2009年底面试的时候看到了Android G1手机，完全都没有认知，更不要说知道什么移动互联网了。</p>
<p>但到现在，移动互联网测试越来越多，无论是传统行业，互联网等企业，技术基本上都已经离不开移动互联网。随着时间的推移，每一年也有越来越多的应届生会去选择移动互联网测试岗位。</p>
<p>明显可以感觉得到现在测试人员的数量越来越多，为了顺应潮流称自己是移动互联网测试的就更多了，但相对水平和素质也越来越层次不齐。不过总体来讲，移动互联网人员的从业数量在9年内几乎是几何倍数的增长，所以我放在了第一位。</p>
<h2 id="培训机构层出不穷"><a href="#培训机构层出不穷" class="headerlink" title="培训机构层出不穷"></a>培训机构层出不穷</h2><p>其实我真的不想把测试写的那么low，但我还是要实事求是的。在移动互联网之前可能51CTO，51Testing，51xxx都是几家独大的，但在移动互联网时代，尤其是在2014年开始，在线教育，网络直播的兴起，越来越多的草根培训机构层出不穷。相应的，前互联网时代的那些机构却并没有很快的跟上移动互联网的脚步。2013年左右开始私人的培训机构开始越来越多，2015年开始针对测试培训创业的也开始逐渐增多。</p>
<p>就移动互联网的9年来说，国内的测试培训机构到今天为止的状态可以说是叹为观止。当然这里其实不仅仅只针对测试，前端，后端，编程语言等都是如此。可以说这就是移动互联网本身所带来的一种变革。</p>
<h2 id="人员要求"><a href="#人员要求" class="headerlink" title="人员要求"></a>人员要求</h2><p>2008年的时候我就不提了，估计公司里都不知道怎么定义移动互联网。<br>​<br>2009年前对于测试的要求就是你好好做功能测试，覆盖功能点，写不写用例等大多数公司都不是很关心，或者不是很懂</p>
<p>2010年很多大公司还是正规化，需要编写正式的用例。但从业人员要求基本上也是能够会运行Android Monkey的Level</p>
<p>2011年大家跌爬滚打开始摸索自动化，但总体还是比较关注用例积累和设计的</p>
<p>2012年是一个分水岭，直接从功能跳跃到了自动化。UI自动化在当时火的不要不要的</p>
<p>2013年对于自动化的要求更加变本加厉，不但要会使用更要会二次开发</p>
<p>2014年从点扩展到了面，从自动化的使用扩展到了持续集成的了解和运用</p>
<p>2015年功能，自动化都告了一个段落，整体开始测试平台化，工具化，技术上开始转移到了无线客户端的专项测试上</p>
<p>2016年安全元年，全栈也好，敏捷也罢也都到了一个白热化阶段，要求测试不但要懂开发，还要懂业务，还要懂架构等等等。正应了我在2012年的时候说的那句话“应聘测试岗位比CTO都要难”。</p>
<p>总体来讲，短短9年的时间，移动互联网测试的技能，素质要求简直是升华了好几次，不得不说大家现在对于测试的理解已经远远不是当初那种“门槛低，点点点”那种境界了。虽然很多人平时的工作依然还在点点点，但你们都有CTO的潜质啊喂。</p>
<p>PS：虽然整体国内的要求在突飞猛进，但大家对于测试的理解依然没有太大的进步。同时测试这个行业整体人员的素质也没有太大的进步。未来还是很令人堪忧的。</p>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>前几天我还问一位小哥为什么测试大会没有去，小哥回答我说测试大会有啥好去的，技术都是开发这边演进过来的。这话其实本质上也没有错，不过移动互联网技术本身从各个方面上还是进展非常多的。</p>
<p>早期2009年底我刚开始做的时候，除了Android的官方文档以外，几乎没有任何的社区和博客有记载关于移动互联的测试技术（开发技术倒是蛮多的）</p>
<p>2011年前基本上都是使用原生工具较多，应用本身复杂程度比较有限，同时开源工具也不是很多</p>
<p>2011年之后Robotium等一大批UI测试自动化框架开始多了起来，网络上关于测试的技术文章也开始逐步增多。同时一大批测试网站，社区也崭露头角</p>
<p>2012年之后应用本身复杂程度大幅度提升，移动互联测试很清楚的分成了App和OS两部分。同时开源测试框架，开源测试工具层出不穷。当时很火的并且做的不错的有Emmagee、athrun等等框架。同时测试活动对于代码的依赖和使用开始了一个新的篇章</p>
<p>2013年过后移动互联所涉及到的技术已经开始有了本质的变化，客户端的内容更多的开始依赖服务端的架构和设计，大家的关注也从一个客户端到了整个一套系统的关注。曾经的Web测试技术，API测试技术，Server测试技术也都慢慢的融入了移动互联。这也是之后为什么测试的关注点会从一个点发展到一个面的根本原因</p>
<p>截止到现在，技能树可见：<a href="https://zhuanlan.zhihu.com/p/23379241?refer=c_53429125。" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/23379241?refer=c_53429125。</a><br>移动互联网本身的测试工具已经非常多，开源的框架和工具也在github上面遍地开花，另外技术本身已经出现了很多的组合使用。这一切与9年前可以说是天壤之别。现在测试技术可谓遍布各个网站，测试测试栈也几乎可以打通了整个常用的编程语言以及前后端系统。夸张点说现在的移动互联网的测试技术可以说也到了让很多人望而生畏的地步了。</p>
<h2 id="测试意识"><a href="#测试意识" class="headerlink" title="测试意识"></a>测试意识</h2><p>这点的确是个很有趣的现象，但可能本质上和移动互联网关系并不是非常大，在我看来移动互联网只不过是加速了这一现象的发生。还是需要分成两个方面来讲，学术界和工业界</p>
<p>早在2009-2012年间吧，整个测试行业可以这两方都有非常明显的活动。</p>
<ul>
<li>学术界：办协会，做会刊，登报纸。扩散各种测试用例设计的方法，理念。从国外引入各种新的概念和设计思维等等。当然测试毕竟也是研发过程中的一个环节，所以敏捷、DevOps的一些理论也都不会放过。</li>
<li>工业界：工业界的同学其实真的忙的都和狗一样，哪里有空去研究别的呀。不过之前几年基本上都是在学习移动互联的新知识，大力研究UI自动化中。（这里对不起狗了，狗其实比我们要轻松多了）</li>
</ul>
<p>他们的关注点都在一些通用的方法论上，但这些在2013年之后基本上就消失殆尽了。一来这些在行业中慢慢的很难去赚钱了，二来移动互联网加速了整个国内互联网的各种属性，理论本身也很难去有落地实践的可能性了。但我觉得大家不得不承认一点，学术界在高校中被称之为“未来科学”是有道理的，因为他们在意识层面上的确比工业界的人们要先进的多。</p>
<p>测试真正意义上的自动化可能是自动化的终极目标，测试本身我们可以简单的分成“测试前”、“测试中”和“测试后”，但现在看来工业界基本上都还在“测试中”这个环节折腾，测试的自动化有通过软件框架实现的，也有通过opencv摄像头＋硬件实现的。但无论是哪一种基本上都还在“测试执行自动化”。</p>
<p>在早些年工业界很少有人去关心“测试数据，用例设计自动化”以及“测试结果分析，定位，质量自动化”这两个概念，但学术界很多人在研究，甚至国外已经研究了几十年了。近几年才慢慢开始有相关的实践在大公司中落地，比如咸鱼在前年demo的基于脑图的用例生成、遍历技术、线上数据双引擎、大数据质量大盘等等。相信这些在未来都是工业界测试技术可以突破的点。</p>
<p>总而言之呢，移动互联网在这几年里的测试意识基本上是：<br>功能–&gt;UI自动化–&gt;接口自动化–&gt;Native、WebView、底层分层测试–&gt;持续集成–&gt;专项测试–&gt;平台话、智能化（数据准备、遍历、问题定位）–&gt;质量（贯穿整个系统和整个研发流程）</p>
<p>其实回过头看看，还是比较可怕的。</p>
<h2 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h2><p>这的确还是有本质变化的，早几年除了ChinaTest和51XXX的一些活动以外基本上就没有什么针对测试的活动和大会了。经过了这几年洗礼之后，行业我们能够看到不仅仅有很多的测试专属会议以外，BAT也会时不时的有一些技术交流大会，同时开发的各种大会也合入了很多测试的topic在其中。（我都当过讲师，我骄傲我自豪～）</p>
<p>总体来讲早几年我还苦于没有人交流所以自创了“移动测试会”这样一个沙龙活动来主动和大家交流。现在的同学们就非常幸福了，因为交流的平台和渠道实在太多太多了。</p>
<h2 id="测试定位"><a href="#测试定位" class="headerlink" title="测试定位"></a>测试定位</h2><p>这里的定位其实在别人眼中的定位，虽然我觉得可能这点上并没有太大的进展，但至少也是从0到1迈出了这样一步——公司里应该要有测试这个岗位和角色。不过国内基本上95%以上的公司和人都分不清楚QA和测试的区别，可悲可叹啊。</p>
<p>移动互联网中，早期其实大部分公司都是不需要测试的，毕竟测试并不能帮助产品从无到有</p>
<p>中期的时候呢，为了保证产品质量，引入了一部分传统互联网的测试来做移动互联网，但后来发现不行。一来移动互联网并没有想象中那么赚钱，所以在过程中很多公司其实有过一次测试的裁员。二来发现传统互联网的测试根本就hold不住移动互联网的产品，所以基本上后来就招聘那些有经验的移动互联网测试了</p>
<p>后期，也就是差不多现在这个时间段。测试和开发、运维等都开始融合了，测试本身的定位也从原本的测试保证到了质量保证。这也算是符合中国国情的一种定位吧。</p>
<p>简单来讲，这也算是一个很突出的进步了。测试这个角色其实在这几年间就是一个催化剂的作用，让人和企业都慢慢的意识到了测试的重要性，意识到了质量的重要性，意识到了测试并不是想象中的那么简单这样几个点。在我看来这些就足够了。</p>
<p>话说很多人会问我人员数量上，技术上都有提升了，素质上对应也应该有提升啊。我只想说，不好意思，在我看来人员素质上没有任何提升。9年前测试在抱怨薪资低，qq群里每天水，然后做伸手党，9年后的今天依然如此，没有任何区别。我倒是可以考虑再写写“9年来，测试行业有什么没有任何进展”</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[测试到质量转变]]></title>
      <url>http://yoursite.com/2016/11/03/testtoquilty/</url>
      <content type="html"><![CDATA[<p>今年我也不知道为什么会突发奇想来讲这个topic，这与我前几年风格非常不符。但也许这正是我觉得2016年应该说的东西吧，事实证明三场大会讲完之后，很多人第一次私下来找我要PPT，同时也觉得这个topic并不是几个小时能讲完的，所以我在这里还是浓缩的写篇文章说明下吧。</p>
<h2 id="移动互联网测试常见问题"><a href="#移动互联网测试常见问题" class="headerlink" title="移动互联网测试常见问题"></a>移动互联网测试常见问题</h2><p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/d5258e61993c68112dc35118c3a9596d.png" alt="test1"></p>
<p>这基本上就是我今年去别的公司的时候别人问我的问题。其实总体来讲大家现在还是有很大进步的，既关注了整体策略也关注了技术细节。但让我奇怪的是其实大部分人关注的还是别人怎么做，但缺少的就是从自己公司的产品业务和团队情况去思考问题。这不得不让我想到“别人家的xxx”这样一个场景。当初做这个ppt的时候我就是希望贴近主题尽量从全面的去阐述测试到质量的变化。</p>
<p>反正总体来讲，还是觉得大家太过焦躁，我们总是偶尔的很积极的想去了解，想去学习，但这不可持续发展，这就好像我们会去存很多pdf和网站，但从来不看是一个道理。</p>
<h2 id="关于测试人员"><a href="#关于测试人员" class="headerlink" title="关于测试人员"></a>关于测试人员</h2><p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/7199fe8b43aa452371f32ad198a167f4.png" alt="test2"></p>
<p>关于人员我想从图中的四个方面进行阐述。毕竟现在整个行业对于测试的要求其实已经不仅仅停留在“你会什么”，“你懂什么”，“你有多少能力”这个level了。取而代之的更多的是“你潜力多少”，“你是否拥有持续学习的能力”等等。所以在关于测试人员中我也顺便提到了“KPI”和“招聘”</p>
<p>但我在这里不得不强调的就还是所谓的“测试技术”，因为现在基本上行业风气就是大家追求“开发技术”，而不是“测试技术”，我们需要有测试思想和质量意识的去做事儿，而不是仅仅像开发一样去开发某些产品。所以这一切的前提还是需要我们从测试跳出来到质量来思考问题才会有答案。</p>
<h2 id="一专多能"><a href="#一专多能" class="headerlink" title="一专多能"></a>一专多能</h2><p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/8159752a051b3d37b41bc282cbaf1c06.png" alt="test3"></p>
<p>之前有很多文章讨论过所谓的“全栈”，其实至少从现在来看，“全栈”真正的意义随着时间的推移也开始浮出水面——快速学习的能力和驱动持续学习的兴趣。<br>第二点其实想表述的就是如果我们走出测试来看质量的话，几乎所有事情都不是单纯的测试个体或团队能够完成的。我们需要走出那个“你提需求，别人实现”的时代，取而代之的是“你提需求，你牵头来实现”。我们需要去利用合适的资源去做合适的事情，而不是什么都自己来做。</p>
<p>在大会上有很多人会问，一个团队是否都应该是这样一专多能，全栈的人。在我的理解里，一个团队中其实肯定不能全栈的人，也不可能都是全栈的工程师。但这里其实特别的去强调了“定位问题”。举个例子来讲，我们在平时测试的过程中发现了一个问题，我们需要有能力去判断这个问题是前端还是后端的，如果是后端的，那么通过各个系统日志和调用关系需要去明白问题出在什么系统上。如果是前端，那么我们需要去发现是框架层的，还是组建层的，还是业务方等等。也就是说其实无论你是功能测试、自动化测试或者其他更牛逼的测试类型，定位问题都是通用的要求。</p>
<h2 id="KPI"><a href="#KPI" class="headerlink" title="KPI"></a>KPI</h2><p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/bd6b69ad672b08c8ce2735f374834ae7.png" alt="test4"></p>
<p>KPI这边的问题其实就是老生常谈了。但基本上现在都从那么几个点。</p>
<ul>
<li>业务占比最大。首先还是要保证产品业务的质量。这个在KPI上可以量化，但在移动互联网大多关注P0的缺陷会比较多，剩下的功能问题，小问题漏测等其实都是比较常见的。</li>
<li>技术提升。唯一强调的就是技术提升本身需要落地，同时需要给出来使用某技术前后的具体效果的数据对比，一定也是可量化的。一切不落地的技术提升都是耍流氓啊亲</li>
<li>团队协作。指主动分享、能否主动的牵头解决问题等等。</li>
</ul>
<p>基本上也会有细节的不同，但大方向是差不多的</p>
<h2 id="人员招聘"><a href="#人员招聘" class="headerlink" title="人员招聘"></a>人员招聘</h2><p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/2747eb6d71db43c5368b584e9c0f5fbc.png" alt="test5"></p>
<p>其实这是我理想状态下的招聘，现在行业中虽然是有这样的趋势，但还是有点偏差的。不过现在一些大公司的确更看重看问题的角度和解决问题的方式。而不像前几年比较死板的去考验技术。这点我相信今年只要跳槽的同学都深有体会的。</p>
<h2 id="测试技术"><a href="#测试技术" class="headerlink" title="测试技术"></a>测试技术</h2><p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/f3c1c1ff817949981b27eabc26d63717.png" alt="test6"></p>
<p>这个就是留给大家思考吧。大家在追求所谓的技术的同时，也关注关注测试吧。测试的一些基础，理念，方法等。我不希望若干年之后说起技术大家都是开发技术，对测试技术却浑然不知，届时到底自己是测试还是开发也许就谁都分不清楚了。</p>
<h2 id="质量"><a href="#质量" class="headerlink" title="质量"></a>质量</h2><p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/7a7ec87c29be866979b568016e6b1257.png" alt="test7"></p>
<p>其实我知道大部分人还是需要这张图的。后面的PPT我也实在写不动了。<a href="https://pan.baidu.com/s/1jIAUQua" target="_blank" rel="external">ppt链接</a>。接下来自己看吧，有啥问题在这里留言就好。相信这个话题还是值得大家来讨论的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动无线测试技能树]]></title>
      <url>http://yoursite.com/2016/11/02/MobileSkill/</url>
      <content type="html"><![CDATA[<p>###-常用IDE</p>
<pre><code>- Android
    - ADT
    - Android Studio
- iOS
    - Xcode
- Common
    - Atom
    - Sublime Text
    - Vim
    - Visual Studio Code
</code></pre><p>###-基础知识</p>
<pre><code>- Android
    - 掌握Android开发基础技能     
- iOS
    - 掌握iOS开发基础技能
- web
    - 掌握web开发基础技能
- api
    - 掌握api相关基础知识
- 测试
    - 掌握基本的测试用例设计方法和思想
</code></pre><p>###-常见应用模式</p>
<pre><code>- Native
- Hybrid
- H5 App
- ReactNative 
</code></pre><p>###-常用工具</p>
<pre><code>- Android
    - Android sdk manager
    - adb
    - ddms
    - ant
    - aapt
    - emulator
    - Genymotion
    - hierarchyviewer
    - monitor
    - monkey
    - monkeyrunner
    - uiautomatorviewer
- iOS
    - lldb
    - iExplorer
    - libimobiledevice 套件
    - codesign
    - instruments
    - xcodebuild
    - atos
    - xcrun
</code></pre><p>###-常用UI Automation框架</p>
<pre><code>- Android
    - Instrumentation
    - uiautomator2.0
    - Athrun
    - Robotium
    - Monkey
    - Monkeyrunner
    - uiautomator
    - Selendroid
    - Calabash-Android
    - monkeytalk
    - UiAutomation
    - Espresso
    - cafe
- iOS
    - UIAutomation（旧）
    - XCUITesting
    - KIF
    - Frank
    - Appium
    - ios-driver
    - WebdriverAgent
    - Mechanic.js
    - monkeytalk
    - Calabash-iOS
    - TuneupJs
    - ynm3k
- Appium
- Macaca
</code></pre><p>###-常用单元测试框架</p>
<pre><code>- Android
    - robolectric
    - Instrumentation
    - Mockito
    - RxJava
- iOS
    - OCUnit
    - GHUnit
    - XCTest 
    - OCMock
    - OCMockito
    - Expecta
    - OCHamcrest
</code></pre><p>###-常用性能工具</p>
<pre><code>- 抓包
    - Charles
    - fiddler
    - burpsuites
    - tcpdump
    - anyproxy
- 弱网模拟
    - iOS developer mode
    - ATC
    - Charles
- memory
    - Android
        - MAT
        - ddms
        - Memory Monitor
        - Allocation Tracker
        - LeakCanary
        - dumpsys
        - procrank
        - top
    - iOS
        - Memory Leaks
- Scan
    - Android
        - findbugs
        - lint
        - infer
        - CheckStyle
        - PMD
    - iOS
        - scan-build
        - oclint
        - infer
        - deployment
-other
    - Common
        - 安捷伦
        - tcpdump
        - wireshark
        - 高速(慢速)摄像机
        - 埋点
        - 腾讯GT
        - 网易Emmagee
    - Android
        - gfxinfo
        - dumpsys
        - traceview
        - systrace
        - GameBench
        - battery-historian
    - iOS
        - Core Animation(instruments)
        - Network(instruments)
        - TimeProfiler(instruments)
        - Zombies(instruments)
</code></pre><p>###-安全</p>
<pre><code>- Android
    - Drozer
    - apktool
    - dex2jar
    - proguard
    - 加固
    - exported/permission
    - AndBug
    - androguard
    - Xposed

- iOS
    - IDB
    - iRET
    - DVIA
    - LibiMobileDevice
    - otool
</code></pre><p>###-覆盖率</p>
<pre><code>- Android
    - Jacoco
    - EMMA
- iOS
    - gcov
</code></pre><p>###-动态更新</p>
<pre><code>- Android
    - Dexposed（二次开发之后）
    - Robust
    - android-frontia
    - Nuwa
    - HotFix
    - RocooFix
    - DroidFix
    - AndFix 
- iOS
    - JSPatch
    - WaxPatch
- ota
- ReactNative
- weex
</code></pre><p>###-abtest</p>
<pre><code>- AB Tester
- AppAdhocOptimizer
- Google Website Optimizer
- Visual Website Optimizer
</code></pre><p>###-常用灰度测试工具</p>
<pre><code>- testflight
- 蒲公英
- fir
- pre
</code></pre><p>###-常用云测平台</p>
<pre><code>- testin
- MQC
- MTC
</code></pre><p>###-常用持续集成平台／相关工具</p>
<pre><code>- Jenkins
- Travis CI 
- Android
    - mvn
    - gradle
- iOS
    - xctool
    - Cocoapods
</code></pre><p>###-多语言开发应用</p>
<pre><code>- SL4A
- gomobile
</code></pre><p>###-多设备远程管理平台</p>
<pre><code>- STF
</code></pre><p>###-自动遍历工具</p>
<pre><code>- AppCrawle
</code></pre><p>###-软技能</p>
<pre><code>- 知识管理/总结分享
- 沟通技巧/团队协作
- 需求管理/PM
- 交互设计/可用性/可访问性知识
- 快速的学习能力
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Monkey的7年回忆，也是空杯的开始]]></title>
      <url>http://yoursite.com/2016/10/30/Monkey_Seven_Memory/</url>
      <content type="html"><![CDATA[<p>  可能认识我很久的朋友都还记得当初那个刚工作了几年就在行业中各种乱蹦的那个我，一晃眼我工作竟然都7年了。其实朋友圈里我说我已经做了7年了（2009年10月-至今），很多朋友还是很诧异的。其实我自己也经常会有一种错觉，那就是感觉自己年龄在增长，工作年限在增加，而朋友们放佛一直都很年轻，一直没有变老。让我无意间一直会告诉自己，不能落后，要努力前进，追上我的朋友们。但事实上的确大家都在变老，大家也都在前进，我仅仅是为了不让自己落后而前进着。</p>
<h2 id="自嘲"><a href="#自嘲" class="headerlink" title="自嘲"></a>自嘲</h2><p>  依稀记得高中三年，英语没有及格过。当时找了很多补课的老师，我就是所有学生中英语最差的那个。记得老师说陈晔这个同学吧，发挥的好应该可以上个好的一本，发挥的不好估计就最多二本了。记得高考结束查成绩的时候是某一个夏天，我和外婆住在一起，很晚的时候大家都已经在互相告知能够查成绩了，我也没有办法的打开电脑上网查分数。看到分数的那一刻其实我心里是有预期的，但对我外婆来讲可能打击就非常大了。最终结果是分数刚好能够进一个比较差的专科。我从我外婆的表情中可以得到一个信息————这孩子这辈子已经毁了一大半了。那一晚我没心没肺的睡着了，但我估计我外婆一宿没睡。</p>
<p>  记得刚找到测试这份工作的时候是在一家创业公司，一做就是做了两年。这两年中我快乐，忙碌，抑郁，焦虑，几乎什么都有，就是没有去思考。我一直忙于业务，功能，间接性会每天工作到凌晨2点，然后一个人打个小黑车到家楼下的牛肉面馆吃个夜宵，接着回到空荡荡的屋子。偶然的几次会不停的反问自己，这样辛苦为了什么，自己有成长吗？这样委屈为了什么？然而每次都是没有结果的。</p>
<p>  那个时候网络上并没有太多的资料，我在微博上逛游了好久之后看到了段念和左耳朵耗子这样的大神，我也甚至不知深浅的会引用他们的文字并加以自己的评论。那个时候如果知道之后段念能为我的书写序，能和耗子成为同事的话，估计自己要乐疯了。是的，就是这样的。</p>
<p>  创业公司辞职之后，我有半年找不到工作。我每天会接到很多电话，但最终都是以学历不行告终，是的，半年都是如此，甚至连面试的机会都没有。我那个时候并不奢望BAT，但至少想有一份工作。</p>
<p>  记得有一天我在上海田林路的一个十字路口告诉自己，我想在这个行业做点什么，我想帮助这个行业更快速的发展。但与此同时看着眼前的高楼大厦，看着来来往往的人群，再审视了失业的自己。不禁觉得太自嘲了，相比眼前的景色，我再渺小不过了，相比这个行业那么多从业者，我甚至还没有找到工作。是的，没有人认识我，我也不认识谁。</p>
<h2 id="为了生存"><a href="#为了生存" class="headerlink" title="为了生存"></a>为了生存</h2><p>  有一段时间觉得自己不能再窝在公司里了，也想多找人交流交流，想看看外面的世界，也想多知道别人怎么想怎么做的。自己在上海这样一个城市，工作3年了，半年失业，月薪都没有超过7k，心里也是非常着急的。当时2012年年初吧，上海根本就没有什么比较好的交流活动。我就想着自己是不是能自己举办一些交流会，同时也在网上寻求各种交流的机会。虽然现在看来当初这个决定是理所当然的，但对于当初的我来讲简直就是一个不可想象的决定。是的，我决定走出来，去认识大家，让大家认识我。</p>
<p>  我有一个很好的朋友，认识了快15，6年了。某一天我请他去星爸爸喝咖啡，我告诉他我找他没有别的事儿，就是告诉他下我准备自己去闯荡一番，虽然我不知道行业的凶险到底如何，但毕竟面临的是自己未知的事物。当时我记得我原话是这样说的：</p>
<blockquote>
<p>机缘巧合，我可能接下来会在网络上开始尝试做一些分享，在上海线下会尝试举办一些活动。我工作3年了，但我没有意识到自己的进步，我想变得更好，更厉害，所以我选择这样一个途径。当然，我今天找你并非只是告诉你这样一件事情，而是希望你能看着我，如果哪一天我已经忘记了我的初衷，忘记了我的原点，如果哪一天我完全被利益蒙蔽了双眼，那请你来告诉我曾经某一天我找过你，我说过这样一段话</p>
</blockquote>
<p>  从那天之后，我开始自己尝试着做在线的分享，起初半年都是免费的，后来慢慢的一次分享50块钱。那个时候依稀记得自己非常开心，拿着50块钱可以买点自己喜欢的游戏，也会给老婆买点吃的。最辛苦的其实莫过于线下活动，可能有些朋友还记得我创立的“移动测试会”这样一个沙龙，沙龙秉持的一个原则就是免费，有人愿意来，一起交流分享我就非常开心了。那个时候每次找沙龙的场地几乎都不同，有时候在上海体育馆附近，有时候在上海南站附近，我自己出钱租场地，买饮料给前来的朋友，我老婆一段时间挺着大肚子帮我做签到记录等。也许从当时看来这是非常纯粹的为了交流，学习，但从现在反观，这一切其实就是为了生存，没有当初的选择，就不会有今天你们认识的Monkey。</p>
<p>  我从来没有说过情怀就是免费，我认为情怀就是需要坚持那些自己觉得应该坚持的东西，去坚持那些这个世界上已经很多人失去的东西。但赚钱是为了生存，同时也是体现自己劳动成果的一部分。这两者并没有什么冲突的地方，真正的冲突不在这里，而在于每个人的心。我认为我的情怀就在于我贯穿了自己最初的想法，我成为了国内移动互联网测试发展的一个催化剂，并且坚持了7年。</p>
<h2 id="空杯"><a href="#空杯" class="headerlink" title="空杯"></a>空杯</h2><p>  是的，连我自己都不曾想到，华东理工的一名老师的一句话让我冲动的写出了花费一年时间的《大话移动App测试》这样看似狂妄的一本书。很多人和我说这本书写的多么不好多么不好，至少事实这本书目前也已经卖掉了14000+册。但我对这本书有自己独特的见解。我曾经晚上在新天地和一个朋友在Costa喝咖啡。朋友问我</p>
<blockquote>
<p>不久你的书就要出版了，你觉得会卖的好还是不好？</p>
<p>我说“说实话，无论从文笔和技术内容上来讲这本书肯定不能算好，对一些人有帮助是肯定的，但可能很多人也会觉得非常幼稚。但我个人却认为这本书在现在基本上不可能发挥它的价值，等到国内什么时候大家对于测试都有一个正确认知的时候，如果还有人能记得这本书的话，那届时我相信大家会明白它的价值和我想表达的意思的。</p>
</blockquote>
<p>  是的，这就是我的评价。</p>
<p>  之后就是各种不可思议的事情，《大话移动App测试2.0》和《互联网产品测试故事汇》两本书陆续出版，这得感谢恒温和小兔这样两个真心帮助我的朋友。对于我这样一个高考语文没有及格的人来讲，28岁有3本由清华大学出版社出版的书，至少以后能有资本和我女儿吹牛皮了</p>
<p>  我参与的公开课，沙龙活动也开始走出上海，遍布了南京，杭州，北京，深圳，成都，长沙，武汉等各个地区。其实对于我来讲，每次也更像一次旅游，毕竟在这之前我从来没有离开过上海这样一个城市。但感谢给我这些机会人和组织，也让我认识到更多的朋友。</p>
<p>  让我开心的也是这些选择让自己能够有机会前往各个企业进行交流学习，BAT，360，滴滴，银行，JD等企业都让我学习到了很多。之后很多时候也有行业的小伙伴想和我一起去，我说只要有空的都一起过去就ok。谁会拒绝交流学习呢</p>
<p>  现在越来越多的新朋友认识了我，渠道也开始多样化起来。线上线下的活动，知乎Live，微信公众号，书等等。我很多时候都记不起眼前和我打招呼的人是谁，大家是真的要谅解我。😄</p>
<p>  但是现在，我不想循规蹈矩的在去做以前这些事儿了，我也不想再停留在现在的Level和做事习惯上了。就好像当初我站在十字路口一样，我想重新做出一些选择，重新规划自己想要做的事情。与当时不同的就是，我不再是我一个人，我的人脉，我的资历，我的技术手段都是我可以利用的工具。<strong>记得之前有一位对我来讲很重要的朋友和我说，一个人一生也许选择很重要，也许果断的作出选择很重要，但更重要的是懂得放下，懂得舍去，舍得舍得，有舍才有得。</strong>也许当我们沉迷在自己已有的境界中的时候同时也是束缚了自己，不是吗？</p>
<p>  人生还很长，我觉得一个人最失败的地方就是什么都靠自己，不懂的利用资源。如果我下一个7年相比现在没有什么改变，那甚至谈不上活过。前几天我在作出选择的时候，很多人在和我谈人生的意义，我说我觉得我的意义就在于至少我要让这个世界看到我活过，在这个世界上有我活着过的痕迹，我可不想哪一天突然走了之后，在这个世界上甚至找不到我活着过的痕迹，甚至找不到我这个人活着的价值。这并不悲哀，而是悲伤。</p>
<p>  <strong>很多事情你不做，总有别人在做。就好像我一直认为移动互联网测试圈子，哪怕没有我的存在，但这7年行业所发生的事情依然都会发生，只不过做这些事儿的不是我，而是张三李四。事情永远都会有自己的规律，有没有意义取决于是不是自己在主导。</strong>  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建一套属于自己的Blog]]></title>
      <url>http://yoursite.com/2016/10/27/hexobuildblog/</url>
      <content type="html"><![CDATA[<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>  最近机缘巧合的逼迫自己在搭建属于自己的<code>blog</code>，经过了几次周折最终选择了网络上比较火的<code>Hexo</code>，使用之后的确是非常的方便。本文不会去太多的阐述安装，更多的是描述在使用过程中一些记忆深刻的点吧。</p>
<h2 id="命令方式"><a href="#命令方式" class="headerlink" title="命令方式"></a>命令方式</h2><p>  <code>Hexo</code>安装成功之后，整个命令行使用的让我非常开心。😄😄😄</p>
<p>  比如我需要新建一篇文章：<code>hexo new &quot;新文章的名字&quot;</code></p>
<p>  我要清除缓存: <code>hexo clean</code></p>
<p>  我要生成本地的静态网页: <code>hexo g</code></p>
<p>  本地启动服务: <code>hexo s</code></p>
<p>  远程代码部署: <code>hexo d</code></p>
<p>  是的，一切让我愉快，基本上整个从零到现在网站成型过程中没有出现过什么问题。</p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>  <code>Hexo</code>安装主题也是非常方便的，但这里要提醒一句的是，大部分主题的结构可能是相同的。但<code>star</code>数最多的<code>next</code>主题与其他主题的结构不同。所以说修改文件的时候大家需要自己注意。下面我就简单说下一些功能的添加。</p>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p>  整个<code>hexo</code>中有两个<code>_config.yml</code>，这两个一个是针对<code>hexo</code>整个网站的，一个是针对主题的。都是非常重要的。如果你使用的主题是本身已经实现了友情链接的话，那么你可以直接在<code>hexo</code>的<code>_config.yml</code>里面增加下面的设置:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">social:</div><div class="line">github: https:<span class="comment">//github.com/monkeytest15</span></div><div class="line">twitter: https:<span class="comment">//twitter.com/snowangelsimon</span></div><div class="line">weibo: http:<span class="comment">//weibo.com/534598827</span></div><div class="line">zhihu: https:<span class="comment">//www.zhihu.com/people/chen-ye-47</span></div><div class="line">	</div><div class="line"></div></pre></td></tr></table></figure>
<p> 效果如下：</p>
<p> <img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-28%20%E4%B8%8A%E5%8D%8812.25.45.png" alt="社交"></p>
<h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><p> 安装插件：<code>$ npm install hexo-generator-search --save</code><br> 增加配置：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">search:</div><div class="line">	path: search.xml</div><div class="line">	field: post</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>  效果就很好：<br>  <img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-28%20%E4%B8%8A%E5%8D%881.19.05.png" alt="本地搜索"></p>
<h2 id="关于404公益界面"><a href="#关于404公益界面" class="headerlink" title="关于404公益界面"></a>关于404公益界面</h2><p>我们需要新建一个404的page，<code>hexo</code>能够很容易的帮助我们新建。然后只需要在对应的<code>index.md</code>中增加404网站的代码即可。<br> <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"></div><div class="line">&lt;iframe scrolling='no' frameborder='0' </div><div class="line">src='http://yibo.iyiyun.com/Home/Distribute/ad404/key/1209395' </div><div class="line">width='654' height='470' style='display:block;'&gt;&lt;/iframe&gt;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>这样每当我们404的时候也是做了一份公益了.<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-28%20%E4%B8%8A%E5%8D%881.21.23.png" alt="404"></p>
<h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><p>这里主要要强调的就是需要在<code>github.io</code>的根目录下新建全大写的<code>CNAME</code>，否则是不会生效的。别的就没有什么主意的了。根据我给的图配置就可以了。<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-27%20%E4%B8%8B%E5%8D%8811.58.25.png" alt="域名绑定"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[STF修改之三——NodeJS-AngularJS修改传递数据]]></title>
      <url>http://yoursite.com/2016/10/27/STF3/</url>
      <content type="html"><![CDATA[<p><strong>最近我终于明白了AngularJS1.x的模式是MVW，W就是Whatever的意思😂 😂 😂 😂 😂 😂 😂 😂</strong></p>
<p>接着就需要来进一步修改了，比如我们想新增一个报告界面，但想着复用STF的架构，所以就开始继续啃代码，先来说新增一个标签吧，比如下图:<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-02%20%E4%B8%8B%E5%8D%8811.35.20.png" alt="stf3"></p>
<h2 id="device界面解析"><a href="#device界面解析" class="headerlink" title="device界面解析"></a><code>device</code>界面解析</h2><p>根据STF的界面来看，我们想着在这个界面新增一个标签然后复用device的界面，device界面主要目录在<code>/res/app/</code>这里，由于STF中主要的界面都是复用这里的模版和文件的，所以先对于这个目录下的文件做一定的解析。</p>
<p><code>res/app/index.js</code> 这个主要是整个<code>http://localhost:7100/#!/devices</code>对应的界面的主界面代码。这里可以看得出来对应url是/devices，同时引用了<code>./device-list.jade</code>的模版以及<code>DeviceListCtrl</code>的这个<code>Controller</code>。 代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">require(<span class="string">'./device-list.css'</span>)</div><div class="line"></div><div class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = angular.<span class="keyword">module</span>(<span class="string">'device-list'</span>, [</div><div class="line">require ...</div><div class="line">])</div><div class="line">  .config([<span class="string">'$routeProvider'</span>, function($routeProvider) &#123;</div><div class="line">    $routeProvider</div><div class="line">      .when(<span class="string">'/devices'</span>, &#123;</div><div class="line">        template: require(<span class="string">'./device-list.jade'</span>),</div><div class="line">        controller: <span class="string">'DeviceListCtrl'</span></div><div class="line">      &#125;)</div><div class="line">  &#125;])</div><div class="line">  .run(function(editableOptions) &#123;</div><div class="line">    <span class="comment">// bootstrap3 theme for xeditables</span></div><div class="line">    editableOptions.theme = <span class="string">'bs3'</span></div><div class="line">  &#125;)</div><div class="line">  .controller(<span class="string">'DeviceListCtrl'</span>, require(<span class="string">'./device-list-controller'</span>))</div></pre></td></tr></table></figure>
<ul>
<li><code>res/app/device-list</code>， 这就是<code>index.js</code>对应模版的样式</li>
<li><code>res/app/device-list.jade</code>，这里是整个index加载的界面元素模版，我们的标签也是加在这个地方，后面会详细来说的。<br>*<code>res/app/device-list-controller.js</code>，这个文件比较复杂，首先是通过<code>$scope</code>在这个<code>Controller</code>里面去动态获取了所有当前链接的机器，并且创建对应的服务和监听。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$scope.tracker = DeviceService.trackAll($scope)</div><div class="line">$scope.control = ControlService.create($scope.tracker.devices, <span class="string">'*ALL'</span>)</div><div class="line"></div><div class="line">$scope.columnDefinitions = DeviceColumnService</div></pre></td></tr></table></figure>
<p>同时在里面定义了界面列表的元素有哪些并做了绑定以及一些初始化排序的工作，如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$scope.columns = defaultColumns</div><div class="line"></div><div class="line">SettingsService.bind($scope, &#123;</div><div class="line">  target: <span class="string">'columns'</span></div><div class="line">, source: <span class="string">'deviceListColumns'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">var defaultSort = &#123;</div><div class="line">  fixed: [</div><div class="line">    &#123; </div><div class="line">      name: <span class="string">'state'</span></div><div class="line">      , order: <span class="string">'asc'</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">  , user: [</div><div class="line">    &#123;</div><div class="line">      name: <span class="string">'name'</span></div><div class="line">      , order: <span class="string">'asc'</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在整个结构中还有一个文件夹叫做<code>details</code>，这个文件夹中的界面，页面结构都是复用<code>util</code>下面的这些文件，这个待会儿再会来详细说，我们先继续来讲增加标签的事情。</p>
<h2 id="增加标签"><a href="#增加标签" class="headerlink" title="增加标签"></a>增加标签</h2><p>如下增加<code>res/app/device-list.jade</code>的代码，<code>jade</code>严格控制锁进，所以要切记</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">uib-tab(active=<span class="string">'activeTabs.monkey'</span>, select=<span class="string">'focusSearch()'</span>, ng-<span class="keyword">if</span>=<span class="string">'!$root.basicMode'</span>)</div><div class="line">  uib-tab-heading</div><div class="line">    i.fa.fa-<span class="function">list</span></div><div class="line">    <span class="title">span</span><span class="params">(translate)</span> monkey</div><div class="line">  div.device-list-monkey-<span class="title">content</span><span class="params">(ng-<span class="keyword">if</span>=<span class="string">'activeTabs.monkey'</span>)</span>.selectable</div><div class="line"></div><div class="line">    device-list-<span class="title">monkey</span><span class="params">(tracker=<span class="string">'tracker'</span>, columns=<span class="string">'columns'</span>, sort=<span class="string">'sort'</span>, filter=<span class="string">'filter'</span>)</span>.selectable</div></pre></td></tr></table></figure>
<p>这里增加了一个<code>activeTabs.monkey</code>这样一个标签，同时看到了这样一行代码d<code>evice-list-monkey(tracker=&#39;tracker&#39;, columns=&#39;columns&#39;, sort=&#39;sort&#39;, filter=&#39;filter&#39;).selectable，</code>可以先有个印象，待会儿再来说。增加了标签之后，需要在controller里面增加对应的定义和绑定，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$scope.activeTabs = &#123;</div><div class="line">  icons: <span class="keyword">true</span></div><div class="line">, details: <span class="keyword">false</span></div><div class="line">, monkey: <span class="keyword">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后在<code>/res/app/</code>增加对应的<code>monkey</code>文件夹，同时记得在<code>index.js</code>中增加<code>require(&#39;./monkey&#39;).name</code>,引用当然下面文件的名字对应都要修改。Angular本身还是有一定规范的。</p>
<h2 id="nodejs–-gt-JS"><a href="#nodejs–-gt-JS" class="headerlink" title="nodejs–&gt;JS"></a>nodejs–&gt;JS</h2><p>有了标签之后，那么接下来就说数据怎么传输过去了。那么这里就有两个问题，第一个问题就是怎么传到界面上，第二个问题就是怎么修改STF原有的数据。先来说第一个</p>
<p>我们可以在<code>lib/units/app/index.js</code>中增加如下代码，这样在STF启动的时候这个服务就会生效。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'/monkey/demo'</span>, function(req, res) &#123;</div><div class="line">          var monkey_map = &#123;tips:<span class="string">"this is demo"</span>&#125;</div><div class="line">          res.send(monkey_map)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>同时我们可以在<code>res/app/device-list</code>中增加一个界面请求数据的方法，这里就要用到<code>$http</code>和<code>$scope</code>，在界面刷新的时候自动会进行对应url的请求。同时需要在jade中有一个ng的标签是等于<code>monkey_demo</code>，比如<code>(ng-model=&#39;sbmonkey&#39;)</code>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$scope.monkey = &#123;</div><div class="line">  monkey: $http.get(<span class="string">'/monkey/demo'</span>).success(function(data,header,config,status)&#123;</div><div class="line">    console.log(data.tips);</div><div class="line">    $scope.monkey.monkey_demo = data.tips</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于$scope实在太博大精深，这里share一张图，附上网盘地址：<a href="http://pan.baidu.com/s/1eROs7qM" target="_blank" rel="external">http://pan.baidu.com/s/1eROs7qM</a><br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/e7da37b22e74c30fd22cef31a73849a2.jpg" alt="scope"></p>
<p>在STF中很多实用到$rootScope的方法，这些我们都可以在源码中看到方法的定义，有兴趣的同学可以进一步查看。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">Scope</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// 省略属性定义</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Scope.prototype = &#123;</div><div class="line">  constructor: Scope,</div><div class="line"></div><div class="line">  $<span class="keyword">new</span>: function(isolate) &#123;...&#125;,</div><div class="line"></div><div class="line">  $watch: function(watchExp, listener, objectEquality) &#123;...&#125;,</div><div class="line"></div><div class="line">  $watchGroup: function(watchExpressions, listener) &#123;...&#125;,</div><div class="line"></div><div class="line">  $watchCollection: function(obj, listener) &#123;...&#125;,</div><div class="line"></div><div class="line">  $digest: function() &#123;...&#125;,</div><div class="line"></div><div class="line">  $destroy: function() &#123;...&#125;,</div><div class="line"></div><div class="line">  $eval: function(expr, locals) &#123;...&#125;,</div><div class="line"></div><div class="line">  $evalAsync: function(expr) &#123;...&#125;,</div><div class="line"></div><div class="line">  $apply: function(expr) &#123;...&#125;,</div><div class="line"></div><div class="line">  $applyAsync: function(expr) &#123;...&#125;,</div><div class="line"></div><div class="line">  $on: function(name, listener) &#123;...&#125;,</div><div class="line"></div><div class="line">  $emit: function(name, args) &#123;...&#125;,</div><div class="line"></div><div class="line">  $broadcast: function(name, args) &#123;...&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="nodejs–-gt-STF-JS"><a href="#nodejs–-gt-STF-JS" class="headerlink" title="nodejs–&gt;STF JS"></a>nodejs–&gt;STF JS</h2><p>这里为了不破坏STF原本的架构，所以都基于STF原本的代码去修改的，所以还是比较好理解的。按照网上说的，从首先修改了res/app/device-list/column/device-column-service.js这个文件的第一列获取数据的代码，新定义了一个device.monkeytest()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = <span class="function">function <span class="title">DeviceColumnService</span><span class="params">($filter, gettext)</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    state: DeviceStatusCell(&#123;</div><div class="line">      title: gettext(<span class="string">'Status'</span>)</div><div class="line">    , value: function(device) &#123;</div><div class="line">        <span class="keyword">return</span> device.monkeytest()</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着我们需要修改这个数据来源，在<code>res/app/components/stf/device/enhance-device/enhance-device-service.js</code>，这里也定义了<code>device.monkeytest</code>的值是什么。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  var monkey_aaa</div><div class="line">  device.monkeytest = function()&#123;$http.get(<span class="string">'/monkey/demo'</span>).success(function(data,header,config,status)&#123;</div><div class="line">    monkey_aaa = data.tips</div><div class="line"></div><div class="line">  &#125;).error(function(data,header,config,status)&#123;</div><div class="line">    console.log(data)</div><div class="line">  &#125;)</div><div class="line">    <span class="keyword">return</span> monkey_aaa</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/6d3335707565a0702cc06d93581e4011.png" alt="stf3-2"></p>
<p>好吧，所以就是我大概理解了<code>Whatever</code>的意思。to be continue…..</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[首发—大话2专项测试试读]]></title>
      <url>http://yoursite.com/2016/10/27/dahua2xu/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx+gor 初心者之旅]]></title>
      <url>http://yoursite.com/2016/10/27/nginxgor/</url>
      <content type="html"><![CDATA[<p>hi 各位，我又来了。我最近都是初心者。踩坑王就是我。</p>
<p>背景就是我们都知道有一个引流工具gor，为了调试这个货，我想在本地起几个不同端口的服务进行调试，所以才有了今天卧槽的经验。</p>
<h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>首先我们先安装<code>nginx</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew search nginx</div><div class="line">brew install nginx</div></pre></td></tr></table></figure>
<p>nginx本身的nginx.config是设置好的，如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;!-- lang: shell --&gt;</div><div class="line">worker_processes  <span class="number">1</span>;  </div><div class="line"></div><div class="line">error_log       /usr/local/var/log/nginx/error.log warn;</div><div class="line"></div><div class="line">pid        /usr/local/var/run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  <span class="number">256</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></div><div class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></div><div class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</div><div class="line"></div><div class="line">    access_log      /usr/local/var/log/nginx/access.log main;</div><div class="line">    port_in_redirect off;</div><div class="line">    sendfile        on; </div><div class="line">    keepalive_timeout  <span class="number">65</span>; </div><div class="line"></div><div class="line">    include /usr/local/etc/nginx/conf.d<span class="comment">/*.conf;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们想启动多个服务，那么我们需要在路径./conf.d/里面新建多个server.conf，在同一个conf里面写多个server是不允许。<br>所以我们新建了两个，配置如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!-- lang: shell --&gt;</div><div class="line">server &#123;</div><div class="line">    listen       8080; 这里写启动的端口</div><div class="line">    server_name  localhost; 这里是server name</div><div class="line">    root /Users/user_name/nginx_sites/; 这里是自定义webapp的目录</div><div class="line"></div><div class="line">    location / &#123; </div><div class="line">        index index.php; 页面文件</div><div class="line">        autoindex on; </div><div class="line">    &#125;   </div><div class="line"></div><div class="line">    #proxy the php scripts to php-fpm  </div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        include /usr/local/etc/nginx/fastcgi.conf;</div><div class="line">        fastcgi_intercept_errors on; </div><div class="line">        fastcgi_pass   127.0.0.1:9000; </div><div class="line">    &#125;   </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Mac OSX自带了php-fpm，但如果直接启动会报错，说log文件路径不正确。所以我们还需要更改php-fpm.conf文件如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[global]</div><div class="line">; Pid file</div><div class="line">; Note: the default prefix is /usr/local/var</div><div class="line">; Default Value: none</div><div class="line">;pid = run/php-fpm.pid</div><div class="line"></div><div class="line">; Error log file</div><div class="line">; If it's set to "syslog", log is sent to syslogd instead of being written</div><div class="line">; in a local file.</div><div class="line">; Note: the default prefix is /usr/local/var</div><div class="line">; Default Value: log/php-fpm.log</div><div class="line">error_log = /usr/local/var/log/php-fpm.log 此处需要自定义目录</div></pre></td></tr></table></figure>
<p>按照如上配置，我们是可以正常启动服务的，但这个时候我们访问localhost:8080会出现403，原因是我们index.php所在的所有根目录都需要有755权限，如果没有，我们需要chmod 755 path就可以了。正常的界面如下：</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/987bdca036d392c9b89620cf04234b86.png" alt="php"></p>
<h2 id="gor"><a href="#gor" class="headerlink" title="gor"></a>gor</h2><p>这就是坑的开始。先配置golang的环境以及安装gor我就不说了。<br>我碰见的问题是这样的。我使用命令<br><code>./gor --input-http :8080 --output-http www.verycd.com -stats -verbose</code></p>
<p>此时我访问8080界面会变成ok，这说明是gor接受到了这个input而出现的界面，如下：</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-03%20%E4%B8%8A%E5%8D%8812.45.27.png" alt="phpok"></p>
<p>同时gor的log显示让我很无语：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[DEBUG][PID <span class="number">2963</span>][<span class="number">1462464221018871751</span>][<span class="number">1462464221018.871826</span>ms] [HTTPClient] Connecting: http:<span class="comment">//www.verycd.com</span></div><div class="line">[DEBUG][PID <span class="number">2963</span>][<span class="number">1462464236080793607</span>][<span class="number">15061.921856</span>ms] [HTTPClient] Connecting: http:<span class="comment">//www.verycd.com</span></div><div class="line">[DEBUG][PID <span class="number">2963</span>][<span class="number">1462464236080850524</span>][<span class="number">0.056917</span>ms] [HTTP] Disconnected:  http:<span class="comment">//www.verycd.com</span></div><div class="line">[DEBUG][PID <span class="number">2963</span>][<span class="number">1462464247776394823</span>][<span class="number">11695.544299</span>ms] [HTTPClient] Connecting: http:<span class="comment">//www.verycd.com</span></div><div class="line">[DEBUG][PID <span class="number">2963</span>][<span class="number">1462464247776448620</span>][<span class="number">0.053797</span>ms] [HTTP] Disconnected:  http:<span class="comment">//www.verycd.com</span></div><div class="line">[DEBUG][PID <span class="number">2963</span>][<span class="number">1462464251310765636</span>][<span class="number">3534.317016</span>ms] [HTTPClient] Connecting: http:<span class="comment">//www.verycd.com</span></div><div class="line">[DEBUG][PID <span class="number">2963</span>][<span class="number">1462464251310821301</span>][<span class="number">0.055665</span>ms] [HTTP] Disconnected:  http:<span class="comment">//www.verycd.com</span></div></pre></td></tr></table></figure>
<p>此时我尝试了几个方法。</p>
<ul>
<li>方法一：Google Group<br>group里有一个和我碰见一样的问题，我看到了作者给了最新的binary，我下载之后，mac无法识别，估计是编译模式不同导致的吧。failed</li>
<li>方法二：重新下载最新的代码，go build<br>生成了gor，可以使用，但日志和前面一样</li>
<li>方法三：直接从官方地址去下载最新build的binary<br>可以使用，但日志和前面一样</li>
</ul>
<p>到此，我要吐槽的不是这个日志了，关键是gor之后连version都不显示。我几乎可以判断gor还在demo阶段，根本无法投入正式使用这个结论。暂时到这里吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ReactNative 大会卖萌 View]]></title>
      <url>http://yoursite.com/2016/10/27/ReactNativeBuiildView/</url>
      <content type="html"><![CDATA[<p>今天早上看到了FB发的一个关于RN框架开发过程中的故事的文章，真的感觉很好啊。一个开源的项目，很多人参与进来真心是个不错的事情，真不知道TesterHome啥时候能有人来merge代码，😢😢😢。</p>
<p>根据之前的ReactNative扫盲实践，我们继续来看一些组合View怎么来做。使用RN比Native的实现成本的确低了很多。不过性能方面的话，等以后复杂的应用再来对比了。</p>
<p>我们下载了一个大会的banner，放到我们的View中。如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;Text style=&#123;&#123;fontSize:16&#125;&#125;&gt;'测试大会来啦'&lt;/Text&gt;</div><div class="line">&lt;Image style=&#123;&#123;flex: 1, height: 300, resizeMode: Image.resizeMode.stretch&#125;&#125; source=&#123; require('./img/meeting.png')&#125; /&gt;</div></pre></td></tr></table></figure>
<p>然后是选择票的种类，这里选择了picker选择器：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var AwesomeProject = React.createClass(&#123;</div><div class="line">   getInitialState: function() &#123;</div><div class="line">    return &#123;</div><div class="line">      language: '',</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">&lt;View  style=&#123;&#123;marginLeft:10,marginTop:10&#125;&#125;&gt;</div><div class="line"></div><div class="line">        &lt;Text &gt;</div><div class="line">         长的漂亮的都来买票了</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Picker </div><div class="line">          mode=&#123;'dropdown'&#125;</div><div class="line">          style=&#123;&#123;width:200&#125;&#125;</div><div class="line">          selectedValue=&#123;this.state.language&#125;</div><div class="line">          onValueChange=&#123;(value) =&gt; this.setState(&#123;language: value&#125;)&#125;&gt;</div><div class="line">          &lt;Picker.Item label="个人早鸟无虫吃票" value="个人早鸟无虫吃票" /&gt;</div><div class="line">          &lt;Picker.Item label="个人早鸟有虫吃票" value="个人早鸟有虫吃票" /&gt;</div><div class="line">           &lt;Picker.Item label="组队早鸟被虫吃票" value="组队早鸟被虫吃票" /&gt;</div><div class="line">          &lt;Picker.Item label="长的帅的人的票" value="长的帅的人的票" /&gt;</div><div class="line">        &lt;/Picker&gt;</div><div class="line">        &lt;Text&gt;当前选择的是:&#123;this.state.language&#125;&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div></pre></td></tr></table></figure>
<p>可以见下效果图。</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-03%20%E4%B8%8A%E5%8D%8812.50.01.png" alt="reactnative1"></p>
<p>另外附上图片的一些设置方法：<br>通过Image.resizeMode来适配图片布局，包括contain, cover, stretch<br>默认不设置模式等于cover模式</p>
<ul>
<li>contain模式自适应宽高，给出高度值即可</li>
<li>cover铺满容器，但是会做截取</li>
<li>stretch铺满容器，拉伸</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ReactNative 扫盲实践]]></title>
      <url>http://yoursite.com/2016/10/27/ReactNativeNew/</url>
      <content type="html"><![CDATA[<p>最近Weex等开源也是炒的沸沸扬扬。我Mac环境也恢复的差不多了，又到了要学习的时候了。所以就带着基础大家一起来学吧。</p>
<p>现在越来越多的公司会去进行React Native的实践，当然不仅仅只是去使用facebook的框架，也会基于RN的一些理念自己去封装属于自己的RN。公司里现在去使用RN的话大多是想着减少开发成本，增加开发效率，同时也是希望降低现在复杂App的开发门槛。</p>
<p>从测试角度来讲，其实我们会更关心，其与<code>Hybird</code>一些框架的区别以及性能上的差别。这的话，希望接下来慢慢的通过一些复杂点的例子来做些对比。今天先还是开个头吧，马上就回去整理书稿了。</p>
<p>我们先安装<code>npm install -g react-native-cli</code>，然后进行项目的初始化：<code>react-native init AwesomeProject</code>，这个过程中会下载很多的<code>node modules</code>，所以只能耐心等待，顺便说句，翻墙的话我用了<code>Shadowsocks</code>，目前还是非常稳定的。</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/eb17966b6d5924489252ec265d29e03d.png" alt="finer"></p>
<p>这里的话，Android是一个Gradle工程，iOS就是一个workspace，那接下来就是来先上个手。我这里都是用模拟器，原因就是比较方便。我们可以直接去运行react-native run-android来打包一个android的apk，并且运行起来。不过这里也会下载比较久的Gradle，如果大家不愿意等的话，可以去下载离线的。看到如下日志说明你的程序运行很正常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Starting JS server...</div><div class="line"><span class="function">Building and installing the app on the <span class="title">device</span> <span class="params">(cd android &amp;&amp; ./gradlew installDebug...</span></span></div><div class="line">Downloading https://services.gradle.org/distributions/gradle<span class="number">-2.4</span>-all.zip</div><div class="line">...................................................................................................................................................................................................................</div><div class="line">Unzipping /Users/Monkey/.gradle/wrapper/dists/gradle<span class="number">-2.4</span>-all/<span class="number">6</span>r4uqcc6ovnq6ac6s0txzcpc0/gradle<span class="number">-2.4</span>-all.zip to /Users/Monkey/.gradle/wrapper/dists/gradle<span class="number">-2.4</span>-all/<span class="number">6</span>r4uqcc6ovnq6ac6s0txzcpc0</div><div class="line">Set executable permissions <span class="keyword">for</span>: /Users/Monkey/.gradle/wrapper/dists/gradle<span class="number">-2.4</span>-all/<span class="number">6</span>r4uqcc6ovnq6ac6s0txzcpc0/gradle<span class="number">-2.4</span>/bin/gradle</div><div class="line">Download https://jcenter.bintray.com/com/android/tools/build/gradle/<span class="number">1.3</span><span class="number">.1</span>/gradle<span class="number">-1.3</span><span class="number">.1</span>.pom</div><div class="line">Download https://jcenter.bintray.com/com/android/tools/build/gradle-core/<span class="number">1.3</span><span class="number">.1</span>/gradle-core<span class="number">-1.3</span><span class="number">.1</span>.pom</div><div class="line">Download https://jcenter.bintray.com/com/android/tools/build/builder/<span class="number">1.3</span><span class="number">.1</span>/builder<span class="number">-1.3</span><span class="number">.1</span>.pom</div><div class="line">Download https://jcenter.bintray.com/com/android/tools/lint/lint/<span class="number">24.3</span><span class="number">.1</span>/lint<span class="number">-24.3</span><span class="number">.1</span>.pom</div><div class="line">....</div></pre></td></tr></table></figure>
<p>不过出了些意外，需要更新build tool，更新之后就好了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">FAILURE: Build failed with an exception.</div><div class="line"></div><div class="line">* What went wrong:</div><div class="line">A problem occurred configuring project <span class="string">':app'</span>.</div><div class="line">&gt; failed to find Build Tools revision <span class="number">23.0</span>.1</div><div class="line"></div><div class="line">* Try:</div><div class="line">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</div><div class="line"></div><div class="line">BUILD FAILED</div></pre></td></tr></table></figure>
<p>在安装的同时RN会启动一个8081端口的服务，其实就是读取js文件的一个渠道。我们在初次打开的时候会看到如下的界面：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">~/Documents/RN_or/RN1/AwesomeProject/node_modules/react-<span class="keyword">native</span>/packager ~</div><div class="line"> ┌────────────────────────────────────────────────────────────────────────────┐ </div><div class="line"> │  Running packager on port <span class="number">8081</span>.                                            │ </div><div class="line"> │                                                                            │ </div><div class="line"> │  Keep <span class="keyword">this</span> packager running <span class="keyword">while</span> developing on any JS projects. Feel      │ </div><div class="line"> │  free to close <span class="keyword">this</span> tab and run your own packager instance <span class="keyword">if</span> you          │ </div><div class="line"> │  prefer.                                                                   │ </div><div class="line"> │                                                                            │ </div><div class="line"> │  https:<span class="comment">//github.com/facebook/react-native                                  │ </span></div><div class="line"> │                                                                            │ </div><div class="line"> └────────────────────────────────────────────────────────────────────────────┘ </div><div class="line">Looking <span class="keyword">for</span> JS files in</div><div class="line">   /Users/Monkey/Documents/RN_or/RN1/AwesomeProject</div></pre></td></tr></table></figure>
<p>在初次apk加载js的时候，我们可以在server上看到transformed 522/522 (100%)的字样，这是一个加载的过程。如果成功，我们可以看到如下的界面：<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/6b9315cc9e78b6ecea6c7fb8f88b4889.png" alt="rn2"></p>
<p>紧接着我们只要更新对应的js文件，就可以直接在应用中看到我们修改的效果了。项目结构如下：</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/1a50a18a6622fd6a5abcb63224617bc6.png" alt="rn3"></p>
<p>最后来看一个Sample吧，文字＋图片的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> &lt;View style=&#123;&#123;width:70&#125;&#125;&gt;</div><div class="line">    &lt;Image source=&#123;require('./img/seven.png')&#125; style=&#123;&#123;alignSelf:'center',width:45,height:45&#125;&#125; /&gt;</div><div class="line">    &lt;Text style=&#123;&#123;marginTop:5,alignSelf:'center',fontSize:11,color:'#555555',textAlign:'center'&#125;&#125;&gt;恒温&lt;/Text&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<p>接下来后续做一些性能上的评估，应该会比较有意思。其实RN本身搭建不难，还是很容易上手的</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[This is first blood!!!!]]></title>
      <url>http://yoursite.com/2016/10/27/first/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[你所需要了解的区块链技术]]></title>
      <url>http://yoursite.com/2016/10/03/keychain/</url>
      <content type="html"><![CDATA[<p>最近花了大概一周的时间把各个证券，git上关于区块链的文章和论文都看了一遍。我个人的理解已经和之前完全不同了，在这里和大家分享下我的理解吧</p>
<p>起初知道区块链肯定都是因为比特币(bitcoin)，但对于其本身到底是什么根本不得而知，如果只是和别人交流的话可能最多知道区块链是一种比特币底层使用的加密方式。但真的去看相关文献的时候又会觉得云里雾里。不过可能真的隔行如隔山吧，也许金融行业出身的同学就能够更直接的理解了。</p>
<p>而这次查看论文和文献我主要的目的是希望去了解区块链的本质，我并不想现在去了解实现，而是思想的本质，这个东西到底是怎么孕育而生的，中本聪又到底是怎么去思考和设计的。</p>
<p>在我完整的阅读完了我找到的一系列2016年的白皮书和文献之后，我至少领悟到了一点，我之前对于区块链的理解实在太low太low。我相信所有人看完都会有两个很极端的看法：</p>
<ul>
<li>这绝对是未来科学，未来可挖掘潜力非常大，可以说是非常前卫的思想</li>
<li>这就是bullshit，这不仅仅会颠覆金融行业，更会造成很大的恐慌</li>
</ul>
<p>从本质上来讲区块链的确会给人这样的感觉。</p>
<h2 id="区块链1-0"><a href="#区块链1-0" class="headerlink" title="区块链1.0"></a>区块链1.0</h2><p>这是第一阶段的区块链运用，在于可编程货币的时候，目的就是达到全球货币统一化。虽然比特币已经是一个先驱者了，但真的要达到这个远景还是非常难的。但这里的区块链我觉得大部分人是比较好理解的，就是为了大大降低交易成本的一套系统，一套支持货币交易的系统</p>
<h2 id="区块链2-0"><a href="#区块链2-0" class="headerlink" title="区块链2.0"></a>区块链2.0</h2><p>这是第二阶段，可编程金融，在github上面其实已经有了“智能合约”的项目，而区块链基于python等语言也有适应自己的可编程语言。目前已经在运用的领域有：p2p，登记，确权，智能管理等。不过总体还是基于金融行业.</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/0ac483c7aae1138d5c78e4492ef58a05.png" alt="keychain"><br>(图片来自于兴业证券的深度报告）</p>
<h2 id="区块链3-0"><a href="#区块链3-0" class="headerlink" title="区块链3.0"></a>区块链3.0</h2><p>这就是我觉得大部分不可接受的阶段了，区块链的各个领域的普及。所以到3.0的时候我才认识到其实区块链和比特币的关系并不是我想的那么强绑定。区块链本身是一种技术，但更是一种思想和模式，如果要普及和应用，人们势必一定要先能理解这个模式和思想。</p>
<p>为什么说会造成恐慌，原因就在于所谓的“去中心化”，这个前几天我在朋友圈里提到过，这点其实对于现在的整个生态是非常致命的。因为去中心化的思想本身就在于要简单化，将现在行业中过多的参与者，企业，中介等都去除掉。现在是人与人，人与物，将来是物与物。只有物与物的时候才会出现真正的信任制度。</p>
<p>最后PS下，有人已经用区块链在测试中落地了，待我进一步了解哈</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《大话移动App测试2.0》序开放试读]]></title>
      <url>http://yoursite.com/2016/07/27/dahuaapp2/</url>
      <content type="html"><![CDATA[<p>随着封面的确定，说明大会也临近了，同时说明716拿到书这件事情终于也还是可能的了，只能说一切都太不容易了，设计师妹子被我快嫩死了。</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/1.png" alt="大话2"></p>
<p>这里再次感谢各位支持本书的前辈，以下开放顺序是根据序的提交顺序</p>
<h2 id="钱承君序"><a href="#钱承君序" class="headerlink" title="钱承君序"></a>钱承君序</h2><blockquote>
<p>钱承君介绍：钱承君，多年互联网从业经验，目前在百度担任部门经理岗位，下属百人规模团队，先后负责大数据、图片搜索、云安全、基础架构、网站联盟的质量团队管理工作，在大型分布式系统、大数据系统、广告检索架构等领域拥有丰富实战经验。每年坚持出品最新测试技术实践，乐于分享，欢迎业内同仁交流。<br>非常荣幸受邀为这样一本书写序。看到风格鲜明的前言，我就有深刻的共鸣，有不少个人的想法希望与诸位读者分享。纵观“质量保障”这一行业发展至今，从起初的平顺，到近几年更激烈的变革，可以清晰看到几个关键时间节点：</p>
</blockquote>
<p>工业革命后，分工协作与大规模生产替代了家庭作坊。最早的质量管理体系针对的是制造业，典型的图景是一群白大褂在实验室抽检产品，在合格证上盖章。对于传统制造业，尤其是敏感的食品、药品、精密机械、军工，批次质量不稳定对企业是非常致命的问题。质量管理、品质控制等概念，是远超出我们所谈论的测试工作的，从检测手段到检测执行，从员工培训到奖惩机制，从生产效率到符合法律法规，是一个系统性的工程。质量是企业的生命线，质量管理是CEO背负的重要使命之一。<br>九十年代初，随着摩尔定律的应验与个人电脑的普及，我们有能力架构越来越复杂的软件系统，软件研发也从单兵作战转为集团军作战模式。当时行业中出现一个困扰，大型的、耗资过亿美元的复杂项目有高概率偏离最初目标甚至完全失败，这一现象激活了学术界对软件工程及相关理论的研究兴趣，而软件测试是其中一个重要的分支。瀑布模型开始盛行，一个项目从需求分析、架构、开发、测试、实施，被切分成了清晰隔离的片段，相互间有明确的交付边界，从而尽可能避免大型组织的不可控风险。继承细化的分工的趋势，测试职能也进一步分化，有专注测试工具开发的，有专注测试过程管理的，有专注性能测试的，有专注集成验收的。</p>
<p>千禧一代，随着互联网的快速兴起，带来了一些软件研发理念的变化。在瀑布模型下，测试人员追求的是规避一切风险，尽可能覆盖缺陷，追求尽可能高的质量。在互联网时代，由于缺陷召回成本的降低，团队更多追求的是质量与效率的平衡。国内的行业发展略有滞后，在大约五年前，很多CTO的履历中重要的一条是带领软件组织进行敏捷变革。从市场反应看，出现了短期的对测试开发工程师（及敏捷教练）的旺盛需求，需要自动化与持续集成实践来支持企业的快速迭代。对于互联网时代的企业，快速应对市场变化是一种非常重要的能力。</p>
<p>后敏捷时代（我自造的一个名词），用以描述我看到的当前与未来几年的行业状态。新一代的互联网化软件组织（例如Facebook），宣扬角色模糊，强调全栈工程师，强调一专多能。一个需求的出现到发布与实现，希望能压缩到四个小时左右，极致快速，成为一种新的竞争力。从持续集成，到持续发布，到Dev-OP，是我们目前看到的趋势，目前看，这一波趋势会愈加激进。</p>
<p>如果把这些重大转变放在时间轴上，我们会发现，变革的周期变得越来越短，对单一职能的要求变得越来越高。回到最初在制造业的定义，质量技术服务的是整个业务领域，远远不是“测试”这一单一能力。质量的价值是永久存在的，但是否由测试工程师这一工种抱着几个时代之前的老旧理念去交付，是一个非常存疑的问题，请容许我抱有谨慎的悲观。<br>在上述历史长河，移动测试技术是近几年很重要的那一股激流。五年一个时代，移动互联网的五年，智能移动设备持有量的高速增长，造就商业机会与行业需求增长，是继自动化测试后，对测试行业又一个非常好的机会。手机应用的质量数据分析（崩溃分析）、应用端监控、手机云测、易用的 AB-Test 能力，都是移动应用行业为测试从业人员带来的新机遇。</p>
<p>逐渐我已成为陈晔吐槽的测试管理者，擅长的领域并不在移动应用，对书中提及的测试技术本身无法给出有价值的评价。但是作为在测试行业挥洒过青春、抱有真挚感情的从业人员，非常感激和赞赏陈晔及所有参与者的努力。因为行业有这样一群优秀的执着的追求着技术的人们，测试行业会在激变的时代续存、进化、重生，变得越来越有价值，越来越重要。</p>
<p>想借写序的机会对读者朋友说，开卷有益，每年了解下业内主流的会议、主流的技术变革、主流的新技术，对于技术视野的提升与个人职业生涯的保值，是一个非常好的习惯。如果读者朋友在测试行业足够资深，也非常欢迎和期待能够加入分享者的行列，为测试行业肩负起责任，通过博客、沙龙、微信、乃至出品书籍等各种方式，使得我们所在的行业能持续进步，能在这个风起云涌的新时代，发挥出质量技术应有的影响力与价值。<br>逆水行舟，优胜劣汰，在激烈的变革中一定会有很多人离场，也一定会有很多机会，有很多人脱颖而出。祝福看到这段序言的测试人，希望你能成为脱颖而出的那一个。</p>
<h2 id="戴亦斌序"><a href="#戴亦斌序" class="headerlink" title="戴亦斌序"></a>戴亦斌序</h2><blockquote>
<p>介绍：Testin云测COO，联合创始人</p>
</blockquote>
<p>这是移动互联网的时代，也是创新的时代</p>
<p>2012年的时候，我记得是Testin网站上线的第二年，我们已经发展了很多的开发者来免费使用Testin的服务，当时我正在为一件事发愁，就是如何提升我们平台自动化测试的深度，我们在2012年年初已经基于图像识别的技术开发了一套自动遍历测试的算法，对一般的兼容测试而言，已经相当不错了，但是我们还想做的更深入，我们想支持自定义脚本的测试，这样可以在云端实现自动化功能的测试，这将是一个非常大的突破，但是当时公开的资料非常少，Android本身的自动测试框架也非常弱，我当时在到处搜集资料，正好看到一篇文章，标题就是“Android Application Testing”，我觉得作者在移动APP测试领域颇有见地，而且非常全面，我查了下作者，叫Monkey陈瞱瞱，当时就加了微博，而且通过微博的私信进行了深入的探讨，Monkey当时也在使用Testin的兼容测试，并且提了很多建议和意见，我们还讨论了云端的自动化功能测试、性能测试和测试管理系统，我们都有一个共识，这是一个移动互联网的时代，而移动应用软件的测试与传统软件测试相比，测试方式和内容发生了巨大的变化，软件的移动化，要求软件具备跨终端、跨网络、跨地区、个性化、更新升级速度快等特性，给软件测试带来了更大难度、更多复杂性和更高的成本；测试设备的多样化和不断更新、人力成本的逐年增加，无论原来的自建队伍、自购设备测试还是外包测试的方式已经适应不了市场发展的需要，必将被新的测试方式所替代，这是移动互联网的时代，也是创新的时代。</p>
<p>创新改变行业<br>从2012年之后的几年间，我和Monkey都在测试领域按我们各自对创新的理解进行着具体的实践，我能明显感觉到Monkey的进步和探索的步伐，他从一个专业的测试工程师成长为一个测试行业的布道者，Monkey致力于提升整个测试行业的技术水平，力图改变大家对测试的认识，他在大学担任公益讲师，希望帮助更多的测试行业从业者，2014年他出版了他的第一本著作“大话移动APP测试”，在这本书里，Monkey以自己多年的工作经验和在移动APP测试领域的创新实践，为有志于移动APP测试的测试人员打开了移动APP测试的大门，展现了移动APP测试的复杂性和多样性，为新入行的同学们指明了一条清晰明确的道路。</p>
<p>与Monkey一样，我们也希望通过创新改变行业，Testin是国内第一个提出“云测试”概念:把测试能力搬到云上，并努力去实施的公司，2012年之后，Testin的发展也非常快，Testin兼容测试的用户到今年年初已经突破了70万，我们的真机测试实验室也已经落地到旧金山，Testin真机云测试平台管理的手机和其他移动智能终端设备已经从2012年的几百台扩充到今年年初的四万多台，我们实现了云端的自动化功能测试，并且支持各种常用和最新的测试框架，完善了性能测试，通过Testin的测试大数据分析，我们重新定义了各行业APP的性能基准，为APP开发者提供精准的性能数据标准。</p>
<p>Testin另一个改变行业的创新，就是率先在国内建设了开放的众包测试服务平台，成为国内第一家采用专家众包服务模式，帮助客户解决专业测试难题的公司，Testin利用参与众包的大量测试专家为客户组建专门的虚拟测试队伍完成软件测试，截止到2016年5月，Testin众测平台上已经聚集了上万名的测试专家，以及将近二十万的普通测试人员，Testin已经具备同时服务上万家客户的测试能力，而且这个能力还在不断增长。<br>我和Monkey都相信，在我们的不懈努力下，一定可以通过创新改变测试行业，在移动互联网时代，创新可以改变一切。</p>
<p>这是你的时代，你一定能够成功<br>时隔两年之后，Monkey再次推出了他的新书“大话移动APP测试2”，我很荣幸作为第一批读者先睹为快，在新书里，Monkey保持了他一贯的犀利，他用清晰有趣的方式与大家分享他的研究成果、工作经验以及独特观点，Monkey花了很大篇幅介绍移动APP测试领域的最新趋势与前沿技术，尤其在专项测试、UI自动化、Appium等方面，本书都是你所能找到的最新、最全以及最具实操性的一本书，书中大量的经典案例，对所有想要提升自己技术水平以及想要在移动APP领域取得成功的企业技术管理人员都非常适用。<br>我们正处在一个前所未有的移动互联网时代，也是一个创新为王的时代。</p>
<p>“这是你的时代，你一定能够成功！”，在此，我把这句话送给所有的创业者和本书的读者，相信在读完这本书之后，你工作起来会比以前更轻松，也能取得更为卓越的成绩。</p>
<h2 id="Dennis段念序"><a href="#Dennis段念序" class="headerlink" title="Dennis段念序"></a>Dennis段念序</h2><blockquote>
<p>介绍：现华夏信财副总裁兼互联网金融品牌CEO，前宜人贷CTO、豆瓣网工程副总裁<br>“老板，来一斤移动APP。 要用最新的 UI规范，但不要太花哨。耗电得低，不能偷跑用户的流量。对了，Android兼容性可得充分考虑。还有啊，这个App我们准备两周发布一个版本，开发测试得跟上了 ……”<br>——丹尼斯.段 的要求</p>
</blockquote>
<p>现在的互联网早就成了移动App的天下，地铁里，公交上，某个小面馆的收银台，甚至走在路上深色匆匆的人，大部分时候，都在用或漠然，或微笑，或烦恼的眼神，专注地盯着自己手上那个充满魔力的小盒子，而小盒子的屏幕上，总是某个骄傲的App。</p>
<p>“这是最好的时代，也是个最坏的时代”——虽然这句话的烂大街程度是的文艺青年都都不再原意引用，可我还是觉得，对开发和测试来说，在这个移动应用的时代，这句话是个好的注脚。即使只看中国市场，苹果AppStore每月新增的应用数量也将几千款，想要让某个应用在这么激烈的竞争情况下脱颖而出，可想而知，除了对应用本身是否满足了用户的需求有要求之外，对app的质量和用户体验也有着非常高的要求。</p>
<p>不得不说，在国内，就我所能了解的情况来看，移动App的测试方法仍然处在早期的阶段：大部分移动应用的测试严重的依赖手工，对移动的专项测试、移动应用的持续集成与发布方面的关注，还有相当大的改进空间。当然，造成这种状况的一部分原因是移动App本身的特性：相较于Web 2.0时代的网站来说，移动App的UI逻辑与业务逻辑耦合更加紧密；移动设备在兼容性、移动性（对网络状况的影响）、耐用性（目前主流的智能手机操作系统都采用了尽可能节省电量的进程调度策略）方面的策略则给移动APP测试带来了一些需要深入研究的专题。而另一个造成这种状况的重要原因，自然是这个行业的从业人员，在面对移动App的大潮时，并没有做好必要的准备。</p>
<p>讲真，陈晔晔邀请我为他的《大话移动App2》写序的时候，我其实内心是拒绝的。原因很简单：首先，好几年前我就不再把软件测试当成我的主业了，让我来评价一本描述我长时间不再涉足领域的书，听起来就不太合适；其次，就像陈晔晔在书中吐槽的那样，说起国内的软件现状，我也有满满的吐槽能量无处释放。不过，在读完这本书完整的初稿之后，我还是打开了Word，在我的MBP上敲下了这些文字。</p>
<p>很高兴陈晔晔愿意用一本书来分享他在移动App测试领域的心得，从系统性的角度来看，也许这本书还可以做的更好，但通读全书的时候，我还是很被陈晔晔的真诚所打动。他已经努力的把自己所知，所实践过的重要内容都留在了纸面上，从移动App测试的总体状况、App测试的工具、专项测试等各个方面进行了自己的阐述，尤其是其中对专项的深入挖掘。看得出来，陈晔晔在这个领域的确是下了不少的功夫，也有不少值得品味的心得体会。字里行间，除了对心得的描述之外， 满满的还有陈晔晔“恨铁不成钢”的心情，甚至不乏某些读者可能会觉得不舒服的字句，但作为曾经在测试行业战斗过10多年的我来说，我完全理解陈晔晔的吐槽，以及他希望这个行业能够更优秀，更吸引人的拳拳之心——可以随心所欲地说想说的话，真是羡慕这个活力四射的年纪呀。</p>
<p>这是一本作者用心写就的书，对于想要理解移动App测试的同学而言，开卷必然会有益。回望我曾经战斗过的测试领域，衷心希望这个领域中的同学们多一点开拓，多一点冒险精神和让自己不舒服的勇气。</p>
<p>是为序。</p>
<h2 id="我还想说的"><a href="#我还想说的" class="headerlink" title="我还想说的"></a>我还想说的</h2><p>如果你能看到这里，说明你还是很有耐心的，容我最后啰嗦几句。凌晨1:30，我仅仅只是复制黏贴这些序已经让我热泪盈眶。每个人都代表着一段历史，每个人也都会影响未来，因果循环。让我感动的是这已经过去的历史，让我害怕的是这没有来到的未来，让我兴奋的是有你们这样一群用心做事的战友们。谢谢</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[接口测试初学者心得——从 0 开始]]></title>
      <url>http://yoursite.com/2016/07/16/Api_1/</url>
      <content type="html"><![CDATA[<p>今天还有人把我列成大牛，我真心受不起。这几天由于后台架构问题，打乱了我原本使用python框架来测试接口的计划，不得不使用java进行编写。对于我而言，这块经验我和应届生，甚至连应届生都不如。下面的方法用了2个小时才完全调通，真心惭愧。</p>
<p><strong>不过我觉得人贵在挑战自己，贵在愿意去尝试不熟悉的东西，愿意不耻下问，愿意分享，哪怕再初级的东西。每个人都有自己的短板，每个人都要从0到1</strong></p>
<p>从我一个App出身的人来讲，其实我以前对于maven并没有太大的理解，反而觉得pom这个文件配置也很繁琐，没有太感觉到好处。但的确任何事情不去从0开始做的话，很难去体会其中的一些因素，比如我这次做接口测试也一样。我在2年多前做完完整的以python为基础的API测试，但java的话，从0开始去选型，去搭建的确是第一次。</p>
<p>开始我凭借我的经验就是选择了httpclinet，但httpclinet去做接口测试，仅仅是为了调试通各种不同类型的请求就下载了很多依赖库，这方面我真的吐槽Java吐槽的无力了。而且仅仅使用httpclinet的话也不能成体系，简单来讲可以做demo，但无法真正在项目上很有效率的落地。所以我开始寻求了另外的方式，同时不得不说为了追求速度，我就直接手动下载各种jar包了，开始还是很爽的，但后来就发现痛不欲生，这个时候就有一个想法，也许如果很多年前是我的话，我也会想到用maven这种方式吧，否则实在受不了了，感觉就算工程写完了也是一乱团。</p>
<h2 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h2><p>首先我是选择了<code>rest-assured</code>，对我来讲是完全陌生的东西，当然既然是重新来一次，这次我选择了我从来不怎么喜欢用的maven，一切就这样开始了。<br>既然是从0开始，我们就一步一步来讲吧。新建一个maven工程：<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/36014ce8578a19a96e84f41f25faa713.png" alt="maven"></p>
<p>当然在pom中默认我们得要配置上我们基础要用的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">          &lt;groupId&gt;com.jayway.restassured&lt;/groupId&gt;</div><div class="line">          &lt;artifactId&gt;rest-assured&lt;/artifactId&gt;</div><div class="line">          &lt;version&gt;2.9.0&lt;/version&gt;</div><div class="line">          &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">      &lt;/dependency&gt;</div><div class="line">      &lt;dependency&gt;</div><div class="line">          &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">          &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">          &lt;version&gt;4.12&lt;/version&gt;</div><div class="line">          &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">      &lt;/dependency&gt;</div><div class="line">      &lt;dependency&gt;</div></pre></td></tr></table></figure>
<p>接着我们来看下我们的测试代码，一个方法是直接断言，一个方法是rest-assured我写的demo方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.monkey.app.my_rest_test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.jayway.restassured.RestAssured;</div><div class="line"></div><div class="line"><span class="keyword">import</span> junit.framework.TestCase;</div><div class="line"><span class="keyword">import</span> junit.framework.TestSuite;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.jayway.restassured.RestAssured.expect;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.equalTo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.testng.annotations.BeforeTest;</div><div class="line"></div><div class="line"><span class="comment">//import org.junit.Test;</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.testng.annotations.Test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Unit test for simple App.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@BeforeTest</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        RestAssured.baseURI = <span class="string">""</span>;</div><div class="line">        RestAssured.port = <span class="number">8080</span>;</div><div class="line">        RestAssured.basePath = <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserLogin</span><span class="params">()</span> </span>&#123;</div><div class="line">        expect().statusCode(<span class="number">200</span>).body(<span class="string">"success"</span>, equalTo(<span class="keyword">true</span>)).when().get(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppTest</span><span class="params">(String testName)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(testName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Rigourous Test :-)</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testApp</span><span class="params">()</span> </span>&#123;</div><div class="line">        assertTrue(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实最开始并没有想用testng的，但过程中为了更好的管理case和生成report，（maven默认的报告已经丑哭了）所以最终还是选择了testng。所以pom做了增加：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.testng&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;testng&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;6.8&lt;/version&gt;</div><div class="line">        &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;build&gt;</div><div class="line">    &lt;plugins&gt;</div><div class="line">        &lt;plugin&gt;</div><div class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;maven-surefire-report-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;2.19.1&lt;/version&gt;</div><div class="line">        &lt;/plugin&gt;</div><div class="line">        &lt;plugin&gt;</div><div class="line">            &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;2.5.1&lt;/version&gt;</div><div class="line">        &lt;/plugin&gt;</div><div class="line">    &lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure>
<p>build标签里的主要就是报告和代码覆盖率。<br>同时增加了testng的case管理xml。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;suite name="test" parallel="true"&gt;</div><div class="line"></div><div class="line">    &lt;test name="test" preserver-order="true"&gt;</div><div class="line">        &lt;classes&gt;</div><div class="line">            &lt;class name="com.monkey.app.my_rest_test.AppTest" /&gt;</div><div class="line"></div><div class="line">        &lt;/classes&gt;</div><div class="line">        &lt;listeners&gt;</div><div class="line">            &lt;property&gt;</div><div class="line">                &lt;name&gt;userdefaultlisteners&lt;/name&gt;</div><div class="line">                &lt;value&gt;false&lt;/value&gt;</div><div class="line">            &lt;/property&gt;</div><div class="line">            &lt;listener class-name="org.uncommons.reportng.HTMLReporter" /&gt;</div><div class="line">            &lt;listener class-name="org.uncommons.reportng.JUnitXMLReporter" /&gt;</div><div class="line">        &lt;/listeners&gt;</div><div class="line">    &lt;/test&gt; &lt;!-- Test --&gt;</div><div class="line">&lt;/suite&gt; &lt;!-- Suite --&gt;</div></pre></td></tr></table></figure>
<p>其实还是很简单的，直接mvn test就可以执行了。我们可以看到这种报告。<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/03e80a9b07141b7157c1e466af54c064.png" alt="report1"><br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/a36ddf6b7cb4b424652f3a11677a5887.png" alt="report2"></p>
<p>接下来就是1到100的事情了，我也是要不停的去学习更多新的东西，哪怕对很多人来讲是老的东西。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[接口初心者心得第二版]]></title>
      <url>http://yoursite.com/2016/07/13/apibeginning2/</url>
      <content type="html"><![CDATA[<p>好吧，持续做了几天，我继续来做分享了，也希望各位前辈多多指教。我表示我还不是很懂。</p>
<p>目前使用的testng和rest-assured。这几天增加了DataProvider和rest-assured的方法。</p>
<p>testng这里是支持新建数据驱动的xml，比如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;data&gt;</div><div class="line">    &lt;testmethod1&gt;</div><div class="line">        &lt;abc&gt;123&lt;/abc&gt;</div><div class="line">        &lt;def&gt;456&lt;/def&gt;</div><div class="line">    &lt;/testmethod1&gt;</div></pre></td></tr></table></figure>
<p>接着可以通过在类中定义DataProvider来实现xml的解析实现，假设dataprovider对应的方法在A类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@DataProvider</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object[][] providerMethod(Method method) &#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在接下来的要使用到数据的时候就可以直接去添加dataprovider对应的的标签，同时testng会根据test method的方法名去找xml中对应的数据，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Test</span>(dataProvider = <span class="string">"providerMethod"</span>, dataProviderClass = A.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testmethod1</span><span class="params">(Map&lt;?, ?&gt; param)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">...</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这样就可以直接一对多的进行数据驱动了。</p>
<p><strong>这里我有个问题，一般非testng.xml的准备数据的xml里面，很多数据都是不同类型的，但现在我这边读取出来都是String，这个数据类型的设置在xml里面能够直接设置么？或者还有什么好的方式？欢迎大家来告诉我哈</strong></p>
<p>接着再来看下rest-assured吧，Google了相关信息，相比其它框架少了不少。我就用下来的情况说下心得吧。rest-assured也是结合了BDD风格的一个框架。通过given，when，then的结合更方便的进行了API的验证。虽然我个人还是不是很习惯这个语法。我们来看几个例子。<br>比如这样的Json：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"lotto"</span>:&#123;</div><div class="line"> <span class="string">"lottoId"</span>:<span class="number">5</span>,</div><div class="line"> <span class="string">"winning-numbers"</span>:[<span class="number">2</span>,<span class="number">45</span>,<span class="number">34</span>,<span class="number">23</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>],</div><div class="line"> <span class="string">"winners"</span>:[&#123;</div><div class="line">   <span class="string">"winnerId"</span>:<span class="number">23</span>,</div><div class="line">   <span class="string">"numbers"</span>:[<span class="number">2</span>,<span class="number">45</span>,<span class="number">34</span>,<span class="number">23</span>,<span class="number">3</span>,<span class="number">5</span>]</div><div class="line"> &#125;,&#123;</div><div class="line">   <span class="string">"winnerId"</span>:<span class="number">54</span>,</div><div class="line">   <span class="string">"numbers"</span>:[<span class="number">52</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">18</span>,<span class="number">22</span>]</div><div class="line"> &#125;]</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么我们的验证就可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">expect().</div><div class="line">         body(<span class="string">"lotto.lottoId"</span>, equalTo(<span class="number">5</span>)).</div><div class="line">         body(<span class="string">"lotto.winners.winnderId"</span>, hasItems(<span class="number">23</span>, <span class="number">54</span>)).</div><div class="line">when().</div><div class="line">       get(<span class="string">"/lotto"</span>);</div></pre></td></tr></table></figure>
<p>当然我们其实在使用mvn跑的时候我们希望能够看到更多的req，res的日志的话我们可以这样增加，这就是rest-assured style了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">expect().</div><div class="line">         log().all().</div><div class="line">         body(<span class="string">"lotto.lottoId"</span>, equalTo(<span class="number">5</span>)).</div><div class="line">         body(<span class="string">"lotto.winners.winnderId"</span>, hasItems(<span class="number">23</span>, <span class="number">54</span>)).</div><div class="line">when().</div><div class="line">         get(<span class="string">"/lotto"</span>);</div></pre></td></tr></table></figure>
<p>我们也可以看一个比较复杂点的语句吧。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">given().log().all().contentType(<span class="string">"application/json"</span>)</div><div class="line">              .header(<span class="string">"cookie"</span>,</div><div class="line">                      <span class="string">"abcdefghijkl"</span>)</div><div class="line">              .request().body(jsonbody).expect().statusCode(<span class="number">200</span>).body(<span class="string">"result"</span>, equalTo(<span class="keyword">true</span>)).when()</div><div class="line">              .post(<span class="string">"/xxxxx"</span>);</div></pre></td></tr></table></figure>
<p>所以其实一条语句中将请求，返回，断言，包括url_param等都包括在内了。看个人喜好了。不过从rest assured框架的支持上来讲，断言支持的类型很多，有兴趣的也可以试试看。我目前先按照这个架构往下尝试了，大家可以继续等我的心得。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jenkins2.0 不作不会死之旅]]></title>
      <url>http://yoursite.com/2016/03/27/jenkinsbuzuobusi/</url>
      <content type="html"><![CDATA[<p>Jenkins2.0出来有些时间了，我也是一直没空来尝鲜，今天终于有机会了。最终导致我晚饭都没有吃，故事是这样的。</p>
<h2 id="first-blood"><a href="#first-blood" class="headerlink" title="first blood"></a>first blood</h2><p>兴冲冲的前往jenkins2.0的下载网站，和以前一样，提供了.war、.pkg还有docker下载。看着新页面表示希望能有一个好的开始。我这里使用的是mac的osx，然后使用了我最喜欢最傻瓜的<code>java -jar jenkins.war</code>开始了我的傻逼之旅。</p>
<p>正常运行之后看到了如下界面，好感度＋＋😄😄😄<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/4762ed644166b3e9db0dc20df12f263f.jpg" alt="jenkins2.0"></p>
<p>接着就是VPN全开，全部下载完毕之后我们可以看到和Jenkins老版本一样的界面，那么第一步我自然先进入设置进行member安全的设置。按照惯例我勾选了如下两个选项</p>
<ul>
<li>设置安全矩阵</li>
<li>允许注册</li>
</ul>
<p>接着我把自己添加了所有root的权限，设置了匿名有read的权限，一切总是那么的美好，一切总是来的那么突然。我点击保存之后，<strong>出现了jenkins crash，说是匿名必须要设置admin权限，卧槽，我简直震惊了。不过无所谓，我选择了先使用我自己的账号进行登陆。稍等，我看到了不该看到的界面，what，jenkins跳出了404界面</strong></p>
<h2 id="second-blood"><a href="#second-blood" class="headerlink" title="second blood"></a>second blood</h2><p>天了鲁了。404怎办呢，我通过了各种Google确定了一种解决方案——放弃了我傻逼的启动方式，换成了tomcat，我没有想到的是这又是一个更傻逼的旅程</p>
<p>经过了一番配置之后，我表示jenkins正常启动了，但是jenkins2.0相比老版本多出来了一个admin初始化密码，在使用java -jar的启动方式的情况下，我们可以在~/.jenkins/secrets下面找到这个密码，然而然而，jenkins2.0无论我们使用什么方式，都提示在同样的路径下，那么问题来了，我也经过了如下尝试</p>
<ul>
<li>我清空了~/.jenkins这个路径</li>
<li>我关闭了所有已经开的服务</li>
</ul>
<p>好，一切重新开始，同时我也查看了tomcat里webapp的log日志，log日志里面清清楚楚的写着:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">your password is </div><div class="line">**************</div><div class="line">you can also find it in /var/root/jenkins/sercets/......</div></pre></td></tr></table></figure>
<p>苍天啊，你就不能提示的正常点么。结果我发现了原本的~/.jenkins目录压根就没有生成任何的文件，另外我在tomcat里也找不到相关初始化密码的文件。</p>
<p>稍等，有人说你是傻逼么，上面不是有写你的密码是什么么。对的，这个密码我放进去就是说不正确！不正确！不正确！快救救我吧😱😱😱😱😱</p>
<h2 id="no-blood"><a href="#no-blood" class="headerlink" title="no blood"></a>no blood</h2><p>最后，我一切归零，正常搞定了。提醒大家的是<br><strong>不要太在意jenkins2.0的这个提示，看来很多的坑，尽量自己多找找相关文件在哪里<br>千万千万不要去装推荐的插件，插件肯定有冲突，最终我没有安装，所以就没有出现404，成功的过坑了<br>初始化密码是个很坑的设置，各种飘</strong></p>
<p>之后有啥我还会继续更新的。。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[第一届 Geek Testing in ShangHai 会议总结]]></title>
      <url>http://yoursite.com/2016/03/01/GeekTestinginShangHai/</url>
      <content type="html"><![CDATA[<p>本次是我自己发起的第一届GeekTesting活动的总结</p>
<h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>当初想在2016年有一个改变，所以尝试了Geek Testing的活动。本着会议更有质量，有具体的输出，能够真正的帮助到大家的原则。所以会议限制了人数，同时增加了50元的报名费，便于给大家提供更好的活动支持。</p>
<h2 id="开场"><a href="#开场" class="headerlink" title="开场"></a>开场</h2><p>神码的总监给我们排了一个下午的桌子椅子，真心辛苦。一早东哥就来准备了，不过依然掩盖不了之后的紧张。。。😓。。。。<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/ed906906af741c2c57cc23a6f119d5f4.jpg" alt="活动1"></p>
<h2 id="上午——性能专题"><a href="#上午——性能专题" class="headerlink" title="上午——性能专题"></a>上午——性能专题</h2><p>上午基本上我开场白之后，就是东哥的性能在移动互联网上的落地的topic。总体来讲东哥紧张了，不过我想说的是，“东哥，你紧张也不要说出来啊。Orz“。<br>东哥的topic总体来讲还是很不错的，但是由于性能本身就是一个很深入的主题，东哥基本上说了下在移动互联网时代性能测试碰见的问题以及一些落地的解决方案，但由于思想太过跳跃，可能很多同学都没有跟上。不过我相信以后会越来越好哒<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/b690a2e631526be06149d9ef5b9e1c0a.jpg" alt="活动2"></p>
<h2 id="下午——头脑风暴"><a href="#下午——头脑风暴" class="headerlink" title="下午——头脑风暴"></a>下午——头脑风暴</h2><p>首先来讲，头脑风暴的主持的真的很难很累，整个下午的控场控的我MP和HP都没有了。其实这次我主要抛出了这样几个问题</p>
<p>假设我们的团队有很多是异地的，假设我们的产品都是很细的模块化组成的，假设我们的测试开发比也并没有达到很理想的状态。在移动互联网的快速迭代中，如果你是一家公司的测试总监，让你去安排如下的事情你怎么安排</p>
<ul>
<li>整个研发的流程你是会怎么安排，每个时间都做什么</li>
<li>你觉得从初期，中期，后期来讲测试的关注点分别在什么地方</li>
<li>如果你的老板认为测试出现的数据并不能真正说明线上用户手上的应用质量的时候，应该怎么办？（测试人数远远少于线上的用户，测试时间也很有限，网络，环境都是模拟的等）</li>
</ul>
<p>总体来讲大家还是很配合的，现场一共分了四组，每组都有一个代表上来阐述自己team的一些想法。我总结下我的感受，大家目前的想法和做法都感觉差不多，并没有太大的突破。但在我感觉，移动互联网下，现在的模式只是一种过度，也许会有更颠覆式的模式出现。</p>
<blockquote>
<p>现场也有一位创业公司的CTO提出了一个point，我觉得值得去思考。是反推式的方法，或者说是自己想达到什么目标，什么效果然后反推去安排人，去安排时间。可能半年，一年的跨度，自己想达到什么样的质量，什么样的覆盖率，什么样的产品，然后去反推去制定这半年，一年的计划和人员安排<br>请不要喷我写的。。。。妹子当天不在。。。</p>
</blockquote>
<p><strong>请不要喷我写的。。。。妹子当天不在。。。</strong><br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/5ef9eb7f4905b2ac8446475b72fd0b5c.jpg" alt="活动总结1"><br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/0e9a19315a30ab91c05e7778ceb5c530.jpg" alt="活动总结1"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后就是使用了亮瞎的方式补了一张合照。geektesting才第一期，路还很长。相信过程中我们能认识更多的专家，更多有技术的同学，更多有想法的同学。让这样一个集体真正的可以互相帮助，互相提升，达到一个新的高度。<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-30%20%E4%B8%8B%E5%8D%8810.24.46.png" alt="活动总结1"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift 第二个 app]]></title>
      <url>http://yoursite.com/2014/11/06/swift2app/</url>
      <content type="html"><![CDATA[<p>我们继续第二个app</p>
<p>我们首先先创建一个新的swift的project<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/swift2-1.png" alt="swift1"></p>
<p>我们在storyboard中增加一个PickerView，然后将PickerView控件和ViewController.swift做绑定，具体操作可以参见第一篇swift文章，同时我们增加这个Picker中的内容列表</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-06%20%E4%B8%8B%E5%8D%8812.42.29.png" alt="swift2"></p>
<p>我们继续添加应用启动时候需要加载的内容，如下代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">override func <span class="title">viewDidLoad</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line"></div><div class="line">    MyPickerView.dataSource = self</div><div class="line">    MyPickerView.delegate = self</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里，我们看到了左边有两个error，这是因为我们picker的data和delegate都还没有做实现，之后我们会添加的</p>
<p>接着我们需要对于ViewController文件做一个扩展，我们新增加一个swift文件，该文件中我们需要去实现data和delegate，我们先查看UIPickerViewDataSource这个协议下面有哪些方法。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">protocol UIPickerViewDataSource : NSObjectProtocol &#123;</div><div class="line"></div><div class="line">    <span class="comment">// returns the number of 'columns' to display.</span></div><div class="line">    <span class="function">func <span class="title">numberOfComponentsInPickerView</span><span class="params">(pickerView: UIPickerView)</span> -&gt; Int</span></div><div class="line"></div><div class="line">    <span class="comment">// returns the # of rows in each component..</span></div><div class="line">    func <span class="title">pickerView</span><span class="params">(pickerView: UIPickerView, numberOfRowsInComponent component: Int)</span> -&gt; Int</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里，两个方法都不是可选的，故而我们都需要去重写这两个方法。新文件代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewControllerExtension.swift</span></div><div class="line"><span class="comment">// </span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by Monkey on 14-10-10.</span></div><div class="line"><span class="comment">//  Copyright (c) 2014年 Monkey. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line">extension ViewController: UIPickerViewDataSource &#123;</div><div class="line">    <span class="comment">// returns the number of 'columns' to display.</span></div><div class="line">    <span class="function">func <span class="title">numberOfComponentsInPickerView</span><span class="params">(pickerView: UIPickerView)</span> -&gt; Int</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// returns the # of rows in each component..</span></div><div class="line">    <span class="function">func <span class="title">pickerView</span><span class="params">(pickerView: UIPickerView, numberOfRowsInComponent component: Int)</span> -&gt; Int</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> ListNames.count</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">extension ViewController: UIPickerViewDelegate&#123;</div><div class="line"></div><div class="line">    <span class="function">func <span class="title">pickerView</span><span class="params">(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int)</span> -&gt; String! </span>&#123;</div><div class="line">        <span class="keyword">return</span> ListNames[row]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们需要新建一个ViewController，然后让第一个View的按钮和第二个View做跳转绑定。我们选择第二项。<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/swift2-2.png" alt="swift2-2"></p>
<p>同样的，我们还需要在第二个界面上添加一个labelView，从而来接受第一个界面选择的字符串<br>我们接着需要在第一个ViewController中实现按钮的跳转，并将值去传到第二个界面上面。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) &#123;</div><div class="line">        if segue.identifier == "GoToSecondView" &#123;</div><div class="line">            let index = MyPickerView.selectedRowInComponent(0)</div><div class="line"></div><div class="line">            var NickName: String?</div><div class="line">            switch index &#123;</div><div class="line">            case 0:</div><div class="line">                NickName = "恒温"</div><div class="line">            case 1:</div><div class="line">                NickName = "Monkey"</div><div class="line">            case 2:</div><div class="line">                NickName = "Kirito"</div><div class="line">            case 3:</div><div class="line">                NickName = "大东"</div><div class="line">            case 4:</div><div class="line">                NickName = "国文"</div><div class="line">            default:</div><div class="line">                NickName = nil</div><div class="line">        &#125;</div><div class="line">            //这里我们需要定义这个动作是要跳转到第二个界面，并且将第一个界面上面的字符串传给第二个界面的一个对象</div><div class="line">            var vc = segue.destinationViewController as SecondViewController</div><div class="line">            vc.NickName = NickName</div><div class="line">    &#125;</div><div class="line"></div><div class="line">同时我们第二个界面也需要实现，如下</div><div class="line"></div><div class="line">```java</div><div class="line">//</div><div class="line">//  SecondViewController.swift</div><div class="line">// </div><div class="line">//</div><div class="line">//  Created by Monkey on 14-10-10.</div><div class="line">//  Copyright (c) 2014年 Monkey. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">import UIKit</div><div class="line"></div><div class="line">class SecondViewController: UIViewController &#123;</div><div class="line"></div><div class="line"></div><div class="line">    @IBOutlet weak var ReslutLabel: UILabel!</div><div class="line"></div><div class="line">    var NickName: String?</div><div class="line">    override func viewDidLoad() &#123;</div><div class="line">        super.viewDidLoad()</div><div class="line"></div><div class="line">        if NickName != nil&#123;</div><div class="line">            ReslutLabel.text = NickName!+"是奇异博士"</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        // Do any additional setup after loading the view, typically from a nib.</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override func didReceiveMemoryWarning() &#123;</div><div class="line">        super.didReceiveMemoryWarning()</div><div class="line">        // Dispose of any resources that can be recreated.</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RASPBERRY PI B+ 升级型 3 代 512m 开发板 初探]]></title>
      <url>http://yoursite.com/2014/11/04/RASPBERRY/</url>
      <content type="html"><![CDATA[<p>其实今天对于mac怎么烧raspbian还是很有疑惑的。完全不明白，首先先来看下树莓派。我是在淘宝上买的。</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/pi1.jpg" alt="pi1"></p>
<p>这个是树莓派B＋，四个usb，一个mini tf卡，一个网口，一个mini充电口，一个hdmi口主要是这样。</p>
<p>先从官网下载raspbian 的img，下载完毕之后，将tf卡挂到mac上面。使用如下命令</p>
<p><code>df -h</code></p>
<p>查看当前挂载的disk</p>
<p>一般默认tf卡这个挂载的就是disk1，接着使用sudo diskutil unmount /dev/disk1s1。<br>然后我们会看到disk1已经unmount了，这样我们就可以继续进行img的烧入。</p>
<p>接着我们使用sudo dd bs=1m if=/Users/monkey/Downloads/2014-06-20-wheezy-raspbian.img of=/dev/rdisk1这里将img的路径换成自己系统中img所在的路径就ok啦。大概要过10分钟才会烧好。</p>
<p>初次启动会看到如下界面：<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/pi2.jpg" alt="pi2"></p>
<p>接着就和bios的设置一样了，经过简单的设置之后你就可以进入raspbian系统了。因为我买了hdmi转接VGA的线，所以直接看到显示器上面显示。然后我还买了usb无线网络所以直接就可以链接上wifi了～～</p>
<p>我补个过程图：<br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/pi3.png" alt="pi3"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[swift开发第一个App]]></title>
      <url>http://yoursite.com/2014/08/04/swiftApp/</url>
      <content type="html"><![CDATA[<p>swift也出来那么多时间了。2048太高大上了，我们可以来看一个简单的app。</p>
<h2 id="创建project"><a href="#创建project" class="headerlink" title="创建project"></a>创建project</h2><p>我们首先先创建一个新的swift的project</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/swfit1.png" alt="swift1"></p>
<p>在这里我们选择了single application,输入我们的应用名称，语言默认已经是swift</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/swift2.png" alt="swift2"></p>
<p>新建完毕之后我们看到的是这样的结构</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/swfit3.png" alt="swift3"></p>
<h2 id="创建我们的控件"><a href="#创建我们的控件" class="headerlink" title="创建我们的控件"></a>创建我们的控件</h2><p>点击左边面板中的Main.storyboard，这个是从object c很早xcode版本中就流传下来的工具。如同Android中的manifest.xml。接着我们看右下角的面板。选择“show the object library”标签之后，我们就可以直接拖拽控件到storyboard上面。</p>
<p><img src="https://github.com/monkeytest15/BlogPNG/blob/master/swfit4.png" alt="swift4"></p>
<p>在这里我们分别选择三个控件，一个是button，一个是text field，一个是webview。拖拽完毕之后我们可见如下图：</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/swfit5.png" alt="swift5"></p>
<h2 id="定义我们的控件"><a href="#定义我们的控件" class="headerlink" title="定义我们的控件"></a>定义我们的控件</h2><p>我们接着需要在ViewController.swift中进行我们设置的控件的定义。在class ViewController: UIViewController {中添加如下两行:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> var textField:UITextField!</div><div class="line"> <span class="meta">@IBOutlet</span> var webView:UIWebView!</div></pre></td></tr></table></figure>
<p>这里的@IBOutlet是告诉swift，我设置的对象是和Interface Builder绑定的。</p>
<h2 id="定义我们的Action"><a href="#定义我们的Action" class="headerlink" title="定义我们的Action"></a>定义我们的Action</h2><p>我们还有一个button，对。那么我们需要对这个button的行为进行定义。同样的在ViewController.swift中我们添加如下Action方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBAction</span> <span class="function">func <span class="title">didClickGo</span><span class="params">(AnyObject)</span> </span>&#123;</div><div class="line">    var text = textField.text</div><div class="line">    var url = NSURL.URLWithString(<span class="string">"http:"</span>+text)</div><div class="line">    var request = NSURLRequest(URL: url)</div><div class="line">    webView.loadRequest(request)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们就简单的从textfield的控件中得到text，然后进行一个网址的请求。</p>
<h2 id="控件与代码的关联"><a href="#控件与代码的关联" class="headerlink" title="控件与代码的关联"></a>控件与代码的关联</h2><p>完成了以上的步骤，关键是我们的代码和控件还没有绑定起来。Android中通过findviewbyid可以和manifest.xml中的控件进行绑定，而在storyboard中我们只需要进行简单的操作就可以完成这一切。如下图我们首先选择storyboard，然后选择右边面板最后一个标签。</p>
<p>接着我们先关联text和webview，我们只需要拖动下方相应的控件并指定到storyboard上面即可。如下图所示：</p>
<p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/swfit6.png" alt="swift6"><br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/swfit7.png" alt="swift7"><br><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/swfit8.png" alt="swift8"></p>
<h2 id="来看看我们的成果吧"><a href="#来看看我们的成果吧" class="headerlink" title="来看看我们的成果吧"></a>来看看我们的成果吧</h2><p><img src="https://cdn.rawgit.com/monkeytest15/BlogPNG/master/swfit9.png" alt="swift9"></p>
]]></content>
    </entry>
    
  
  
</search>
